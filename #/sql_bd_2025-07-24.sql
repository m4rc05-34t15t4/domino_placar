--
-- PostgreSQL database dump
--

-- Dumped from database version 11.14 (Debian 11.14-0+deb10u1)
-- Dumped by pg_dump version 11.14 (Debian 11.14-0+deb10u1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: fn_jogador_estatisticas_filtro(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_jogador_estatisticas_filtro(p_limite_partidas integer) RETURNS TABLE(id integer, nome text, partidas integer, vitorias integer, derrotas integer, empates integer, merda integer, merito integer, laelo integer, cruzada integer, placar_vitoria integer, placar_derrota integer)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  WITH partidas_com_rank AS (
    SELECT
      p.*,
      j.id AS jogador_id,
      ROW_NUMBER() OVER (
        PARTITION BY j.id
        ORDER BY p.data_hora DESC NULLS LAST
      ) AS rn
    FROM jogador j
    LEFT JOIN vw_partida_com_vencedor p
      ON j.id = p.jogador1_id OR j.id = p.jogador2_id OR j.id = p.jogador3_id OR j.id = p.jogador4_id
  )
  SELECT
    j.id,
    j.nome::TEXT,
    COUNT(p.id)::INTEGER AS partidas,
    SUM(CASE WHEN (j.id = p.jogador1_id OR j.id = p.jogador2_id) AND p.dupla_vencedora = 'A'
             OR (j.id = p.jogador3_id OR j.id = p.jogador4_id) AND p.dupla_vencedora = 'B' THEN 1 ELSE 0 END)::INTEGER AS vitorias,
    SUM(CASE WHEN (j.id = p.jogador1_id OR j.id = p.jogador2_id) AND p.dupla_vencedora = 'B'
             OR (j.id = p.jogador3_id OR j.id = p.jogador4_id) AND p.dupla_vencedora = 'A' THEN 1 ELSE 0 END)::INTEGER AS derrotas,
    SUM(CASE WHEN (j.id IN (p.jogador1_id, p.jogador2_id, p.jogador3_id, p.jogador4_id))
             AND p.dupla_vencedora = 'AB' THEN 1 ELSE 0 END)::INTEGER AS empates,
    SUM(CASE WHEN p.jogadorbct IS NOT NULL AND (
               (p.jogadorbct = 1 AND j.id = p.jogador1_id) OR
               (p.jogadorbct = 2 AND j.id = p.jogador2_id) OR
               (p.jogadorbct = 3 AND j.id = p.jogador3_id) OR
               (p.jogadorbct = 4 AND j.id = p.jogador4_id)) THEN 1 ELSE 0 END)::INTEGER AS merda,
    SUM(CASE WHEN ((j.id = p.jogador1_id OR j.id = p.jogador2_id) AND p.dupla_vencedora = 'A'
             OR (j.id = p.jogador3_id OR j.id = p.jogador4_id) AND p.dupla_vencedora = 'B')
             AND (p.jogadas ILIKE '%C%' OR p.jogadas ILIKE '%L%') THEN 1 ELSE 0 END)::INTEGER AS merito,
    SUM(CASE WHEN ((j.id = p.jogador1_id OR j.id = p.jogador2_id) AND p.dupla_vencedora = 'A'
             OR (j.id = p.jogador3_id OR j.id = p.jogador4_id) AND p.dupla_vencedora = 'B')
             AND p.jogadas ILIKE '%L%' THEN 1 ELSE 0 END)::INTEGER AS laelo,
    SUM(CASE WHEN ((j.id = p.jogador1_id OR j.id = p.jogador2_id) AND p.dupla_vencedora = 'A'
             OR (j.id = p.jogador3_id OR j.id = p.jogador4_id) AND p.dupla_vencedora = 'B')
             AND p.jogadas ILIKE '%C%' THEN 1 ELSE 0 END)::INTEGER AS cruzada,
    SUM(CASE WHEN (j.id = p.jogador1_id OR j.id = p.jogador2_id) AND p.dupla_vencedora = 'A' THEN p.placar1
             WHEN (j.id = p.jogador3_id OR j.id = p.jogador4_id) AND p.dupla_vencedora = 'B' THEN p.placar2
             ELSE 0 END)::INTEGER AS placar_vitoria,
    SUM(CASE WHEN (j.id = p.jogador1_id OR j.id = p.jogador2_id) AND p.dupla_vencedora = 'B' THEN p.placar1
             WHEN (j.id = p.jogador3_id OR j.id = p.jogador4_id) AND p.dupla_vencedora = 'A' THEN p.placar2
             ELSE 0 END)::INTEGER AS placar_derrota
  FROM jogador j
  LEFT JOIN partidas_com_rank p
    ON j.id = p.jogador_id AND p.rn <= p_limite_partidas
  GROUP BY j.id, j.nome
  ORDER BY COUNT(p.id) DESC;
END;
$$;


ALTER FUNCTION public.fn_jogador_estatisticas_filtro(p_limite_partidas integer) OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: jogador; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.jogador (
    id integer NOT NULL,
    nome character varying
);


ALTER TABLE public.jogador OWNER TO postgres;

--
-- Name: jogador_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.jogador ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.jogador_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: partida; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.partida (
    id integer NOT NULL,
    data_hora timestamp without time zone,
    jogador1_id integer,
    jogador2_id integer,
    jogador3_id integer,
    jogador4_id integer,
    placar1 integer,
    placar2 integer,
    jogadorbct integer,
    jogadas text
);


ALTER TABLE public.partida OWNER TO postgres;

--
-- Name: partida_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.partida ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.partida_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: partida_sinuca; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.partida_sinuca (
    id integer DEFAULT nextval('public.partida_id_seq'::regclass) NOT NULL,
    data_hora timestamp without time zone NOT NULL,
    jogador1_id integer NOT NULL,
    jogador2_id integer NOT NULL,
    placar1 integer NOT NULL,
    placar2 integer NOT NULL,
    jogadorbct integer,
    CONSTRAINT partida_placar1_sinuca_check CHECK (((placar1 >= 0) AND (placar1 <= 8))),
    CONSTRAINT partida_placar2_sinuca_check CHECK (((placar2 >= 0) AND (placar2 <= 8)))
);


ALTER TABLE public.partida_sinuca OWNER TO postgres;

--
-- Name: vw_partida_sinuca_com_vencedor; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_partida_sinuca_com_vencedor AS
 SELECT partida_sinuca.id,
    partida_sinuca.data_hora,
    partida_sinuca.jogador1_id,
    partida_sinuca.jogador2_id,
    partida_sinuca.placar1,
    partida_sinuca.placar2,
    partida_sinuca.jogadorbct,
        CASE
            WHEN (partida_sinuca.jogadorbct IS NOT NULL) THEN
            CASE
                WHEN (partida_sinuca.jogadorbct = ANY (ARRAY[1])) THEN 'B'::text
                WHEN (partida_sinuca.jogadorbct = ANY (ARRAY[2])) THEN 'A'::text
                WHEN (partida_sinuca.placar1 > partida_sinuca.placar2) THEN 'A'::text
                WHEN (partida_sinuca.placar2 > partida_sinuca.placar1) THEN 'B'::text
                ELSE 'AB'::text
            END
            ELSE
            CASE
                WHEN (partida_sinuca.placar1 > partida_sinuca.placar2) THEN 'A'::text
                WHEN (partida_sinuca.placar2 > partida_sinuca.placar1) THEN 'B'::text
                ELSE 'AB'::text
            END
        END AS vencedor
   FROM public.partida_sinuca;


ALTER TABLE public.vw_partida_sinuca_com_vencedor OWNER TO postgres;

--
-- Name: vw_comparacao_rivais_sinuca; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_comparacao_rivais_sinuca AS
 WITH confrontos AS (
         SELECT LEAST(p.jogador1_id, p.jogador2_id) AS jogador1_id,
            GREATEST(p.jogador1_id, p.jogador2_id) AS jogador2_id,
            j.id AS jogador_id,
            (((LEAST(p.jogador1_id, p.jogador2_id))::text || ','::text) || (GREATEST(p.jogador1_id, p.jogador2_id))::text) AS id_rival,
                CASE
                    WHEN (p.jogador1_id < p.jogador2_id) THEN (((j1.nome)::text || ','::text) || (j2.nome)::text)
                    ELSE (((j2.nome)::text || ','::text) || (j1.nome)::text)
                END AS nome_rival,
                CASE
                    WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN 1
                    WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN 1
                    ELSE 0
                END AS vitoria,
                CASE
                    WHEN (p.vencedor = 'AB'::text) THEN 1
                    ELSE 0
                END AS empate,
                CASE
                    WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN p.placar1
                    WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN p.placar2
                    ELSE 0
                END AS placar_pro,
                CASE
                    WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'B'::text)) THEN p.placar1
                    WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'A'::text)) THEN p.placar2
                    ELSE 0
                END AS placar_contra,
                CASE
                    WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)))) THEN 1
                    ELSE 0
                END AS merda,
                CASE
                    WHEN ((p.vencedor = 'A'::text) AND (p.placar2 = 0) AND (j.id = p.jogador1_id)) THEN 1
                    WHEN ((p.vencedor = 'B'::text) AND (p.placar1 = 0) AND (j.id = p.jogador2_id)) THEN 1
                    ELSE 0
                END AS merito
           FROM (((public.vw_partida_sinuca_com_vencedor p
             JOIN public.jogador j1 ON ((j1.id = p.jogador1_id)))
             JOIN public.jogador j2 ON ((j2.id = p.jogador2_id)))
             JOIN public.jogador j ON (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id))))
        ), agregado_por_jogador AS (
         SELECT confrontos.id_rival,
            confrontos.nome_rival,
            confrontos.jogador_id,
            sum(confrontos.vitoria) AS vitoria,
            sum(confrontos.placar_pro) AS placar_vitoria,
            sum(confrontos.placar_contra) AS placar_derrota,
            sum(confrontos.merda) AS merda,
            sum(confrontos.merito) AS merito,
            sum(confrontos.empate) AS empate
           FROM confrontos
          GROUP BY confrontos.id_rival, confrontos.nome_rival, confrontos.jogador_id
        ), contagem_partidas AS (
         SELECT (((LEAST(vw_partida_sinuca_com_vencedor.jogador1_id, vw_partida_sinuca_com_vencedor.jogador2_id))::text || ','::text) || (GREATEST(vw_partida_sinuca_com_vencedor.jogador1_id, vw_partida_sinuca_com_vencedor.jogador2_id))::text) AS id_rival,
            count(*) AS partidas
           FROM public.vw_partida_sinuca_com_vencedor
          GROUP BY LEAST(vw_partida_sinuca_com_vencedor.jogador1_id, vw_partida_sinuca_com_vencedor.jogador2_id), GREATEST(vw_partida_sinuca_com_vencedor.jogador1_id, vw_partida_sinuca_com_vencedor.jogador2_id)
        ), agregado_final AS (
         SELECT a.id_rival,
            a.nome_rival,
            string_agg((a.vitoria)::text, ','::text ORDER BY a.jogador_id) AS vitorias,
            string_agg((a.placar_vitoria)::text, ','::text ORDER BY a.jogador_id) AS placar_vitoria,
            string_agg((a.placar_derrota)::text, ','::text ORDER BY a.jogador_id) AS placar_derrota,
            string_agg((a.merda)::text, ','::text ORDER BY a.jogador_id) AS merdas,
            string_agg((a.merito)::text, ','::text ORDER BY a.jogador_id) AS meritos,
            (sum(a.empate))::integer AS empates,
            p.partidas
           FROM (agregado_por_jogador a
             JOIN contagem_partidas p ON ((p.id_rival = a.id_rival)))
          GROUP BY a.id_rival, a.nome_rival, p.partidas
        )
 SELECT agregado_final.id_rival,
    agregado_final.nome_rival,
    agregado_final.vitorias,
    agregado_final.placar_vitoria,
    agregado_final.placar_derrota,
    agregado_final.merdas,
    agregado_final.meritos,
    agregado_final.empates,
    agregado_final.partidas
   FROM agregado_final
  ORDER BY agregado_final.partidas DESC;


ALTER TABLE public.vw_comparacao_rivais_sinuca OWNER TO postgres;

--
-- Name: vw_partida_com_vencedor; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_partida_com_vencedor AS
 SELECT partida.id,
    partida.data_hora,
    partida.jogador1_id,
    partida.jogador2_id,
    partida.jogador3_id,
    partida.jogador4_id,
    partida.placar1,
    partida.placar2,
    partida.jogadorbct,
    partida.jogadas,
        CASE
            WHEN (partida.jogadorbct IS NOT NULL) THEN
            CASE
                WHEN (partida.jogadorbct = ANY (ARRAY[1, 2])) THEN 'B'::text
                WHEN (partida.jogadorbct = ANY (ARRAY[3, 4])) THEN 'A'::text
                WHEN (partida.placar1 > partida.placar2) THEN 'A'::text
                WHEN (partida.placar2 > partida.placar1) THEN 'B'::text
                ELSE 'AB'::text
            END
            ELSE
            CASE
                WHEN (partida.placar1 > partida.placar2) THEN 'A'::text
                WHEN (partida.placar2 > partida.placar1) THEN 'B'::text
                ELSE 'AB'::text
            END
        END AS dupla_vencedora
   FROM public.partida;


ALTER TABLE public.vw_partida_com_vencedor OWNER TO postgres;

--
-- Name: vw_dupla_estatistica; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_dupla_estatistica AS
 SELECT
        CASE
            WHEN ((j1.nome)::text < (j2.nome)::text) THEN ((j1.id || ','::text) || j2.id)
            ELSE ((j2.id || ','::text) || j1.id)
        END AS id,
        CASE
            WHEN ((j1.nome)::text < (j2.nome)::text) THEN (((j1.nome)::text || ','::text) || (j2.nome)::text)
            ELSE (((j2.nome)::text || ','::text) || (j1.nome)::text)
        END AS nome,
    count(*) AS partidas,
    sum(
        CASE
            WHEN (((p.jogador1_id = j1.id) AND (p.jogador2_id = j2.id) AND (p.dupla_vencedora = 'A'::text)) OR ((p.jogador2_id = j1.id) AND (p.jogador1_id = j2.id) AND (p.dupla_vencedora = 'A'::text)) OR ((p.jogador3_id = j1.id) AND (p.jogador4_id = j2.id) AND (p.dupla_vencedora = 'B'::text)) OR ((p.jogador4_id = j1.id) AND (p.jogador3_id = j2.id) AND (p.dupla_vencedora = 'B'::text))) THEN 1
            ELSE 0
        END) AS vitorias,
    sum(
        CASE
            WHEN (((p.jogador1_id = j1.id) AND (p.jogador2_id = j2.id) AND (p.dupla_vencedora = 'B'::text)) OR ((p.jogador2_id = j1.id) AND (p.jogador1_id = j2.id) AND (p.dupla_vencedora = 'B'::text)) OR ((p.jogador3_id = j1.id) AND (p.jogador4_id = j2.id) AND (p.dupla_vencedora = 'A'::text)) OR ((p.jogador4_id = j1.id) AND (p.jogador3_id = j2.id) AND (p.dupla_vencedora = 'A'::text))) THEN 1
            ELSE 0
        END) AS derrotas,
    sum(
        CASE
            WHEN ((((p.jogador1_id = j1.id) AND (p.jogador2_id = j2.id)) OR ((p.jogador2_id = j1.id) AND (p.jogador1_id = j2.id)) OR ((p.jogador3_id = j1.id) AND (p.jogador4_id = j2.id)) OR ((p.jogador4_id = j1.id) AND (p.jogador3_id = j2.id))) AND (p.dupla_vencedora = 'AB'::text)) THEN 1
            ELSE 0
        END) AS empates,
    sum(
        CASE
            WHEN ((((p.jogador1_id = j1.id) AND (p.jogador2_id = j2.id) AND (p.dupla_vencedora = 'A'::text)) OR ((p.jogador2_id = j1.id) AND (p.jogador1_id = j2.id) AND (p.dupla_vencedora = 'A'::text)) OR ((p.jogador3_id = j1.id) AND (p.jogador4_id = j2.id) AND (p.dupla_vencedora = 'B'::text)) OR ((p.jogador4_id = j1.id) AND (p.jogador3_id = j2.id) AND (p.dupla_vencedora = 'B'::text))) AND ((p.jogadas ~~* '%C%'::text) OR (p.jogadas ~~* '%L%'::text))) THEN 1
            ELSE 0
        END) AS merito,
    sum(
        CASE
            WHEN ((((p.jogador1_id = j1.id) AND (p.jogador2_id = j2.id) AND (p.dupla_vencedora = 'A'::text)) OR ((p.jogador2_id = j1.id) AND (p.jogador1_id = j2.id) AND (p.dupla_vencedora = 'A'::text)) OR ((p.jogador3_id = j1.id) AND (p.jogador4_id = j2.id) AND (p.dupla_vencedora = 'B'::text)) OR ((p.jogador4_id = j1.id) AND (p.jogador3_id = j2.id) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%L%'::text)) THEN 1
            ELSE 0
        END) AS laelo,
    sum(
        CASE
            WHEN ((((p.jogador1_id = j1.id) AND (p.jogador2_id = j2.id) AND (p.dupla_vencedora = 'A'::text)) OR ((p.jogador2_id = j1.id) AND (p.jogador1_id = j2.id) AND (p.dupla_vencedora = 'A'::text)) OR ((p.jogador3_id = j1.id) AND (p.jogador4_id = j2.id) AND (p.dupla_vencedora = 'B'::text)) OR ((p.jogador4_id = j1.id) AND (p.jogador3_id = j2.id) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%C%'::text)) THEN 1
            ELSE 0
        END) AS cruzada,
    sum(
        CASE
            WHEN (((p.jogador1_id = j1.id) AND (p.jogador2_id = j2.id) AND (p.dupla_vencedora = 'A'::text)) OR ((p.jogador2_id = j1.id) AND (p.jogador1_id = j2.id) AND (p.dupla_vencedora = 'A'::text))) THEN p.placar1
            WHEN (((p.jogador3_id = j1.id) AND (p.jogador4_id = j2.id) AND (p.dupla_vencedora = 'B'::text)) OR ((p.jogador4_id = j1.id) AND (p.jogador3_id = j2.id) AND (p.dupla_vencedora = 'B'::text))) THEN p.placar2
            ELSE 0
        END) AS placar_vitoria,
    sum(
        CASE
            WHEN (((p.jogador1_id = j1.id) AND (p.jogador2_id = j2.id) AND (p.dupla_vencedora = 'B'::text)) OR ((p.jogador2_id = j1.id) AND (p.jogador1_id = j2.id) AND (p.dupla_vencedora = 'B'::text))) THEN p.placar1
            WHEN (((p.jogador3_id = j1.id) AND (p.jogador4_id = j2.id) AND (p.dupla_vencedora = 'A'::text)) OR ((p.jogador4_id = j1.id) AND (p.jogador3_id = j2.id) AND (p.dupla_vencedora = 'A'::text))) THEN p.placar2
            ELSE 0
        END) AS placar_derrota
   FROM ((public.vw_partida_com_vencedor p
     JOIN public.jogador j1 ON (((((j1.id = p.jogador1_id) OR (j1.id = p.jogador2_id)) OR (j1.id = p.jogador3_id)) OR (j1.id = p.jogador4_id))))
     JOIN public.jogador j2 ON ((((((j2.id = p.jogador1_id) OR (j2.id = p.jogador2_id)) OR (j2.id = p.jogador3_id)) OR (j2.id = p.jogador4_id)) AND (j1.id < j2.id))))
  WHERE (((p.jogador1_id = j1.id) AND (p.jogador2_id = j2.id)) OR ((p.jogador2_id = j1.id) AND (p.jogador1_id = j2.id)) OR ((p.jogador3_id = j1.id) AND (p.jogador4_id = j2.id)) OR ((p.jogador4_id = j1.id) AND (p.jogador3_id = j2.id)))
  GROUP BY
        CASE
            WHEN ((j1.nome)::text < (j2.nome)::text) THEN ((j1.id || ','::text) || j2.id)
            ELSE ((j2.id || ','::text) || j1.id)
        END,
        CASE
            WHEN ((j1.nome)::text < (j2.nome)::text) THEN (((j1.nome)::text || ','::text) || (j2.nome)::text)
            ELSE (((j2.nome)::text || ','::text) || (j1.nome)::text)
        END
  ORDER BY (count(*)) DESC;


ALTER TABLE public.vw_dupla_estatistica OWNER TO postgres;

--
-- Name: vw_jogador_estatistica; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_jogador_estatistica AS
 SELECT j.id,
    j.nome,
    count(p.id) AS partidas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) THEN 1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text)) THEN 1
            ELSE 0
        END) AS vitorias,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'B'::text)) THEN 1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'A'::text)) THEN 1
            ELSE 0
        END) AS derrotas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id) OR (j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'AB'::text)) THEN 1
            ELSE 0
        END) AS empates,
    sum(
        CASE
            WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)) OR ((p.jogadorbct = 3) AND (j.id = p.jogador3_id)) OR ((p.jogadorbct = 4) AND (j.id = p.jogador4_id)))) THEN 1
            ELSE 0
        END) AS merda,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND ((p.jogadas ~~* '%C%'::text) OR (p.jogadas ~~* '%L%'::text))) THEN 1
            ELSE 0
        END) AS merito,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%L%'::text)) THEN 1
            ELSE 0
        END) AS laelo,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%C%'::text)) THEN 1
            ELSE 0
        END) AS cruzada,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) THEN p.placar1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_vitoria,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'B'::text)) THEN p.placar1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'A'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_derrota
   FROM (public.jogador j
     LEFT JOIN public.vw_partida_com_vencedor p ON (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) OR (j.id = p.jogador3_id)) OR (j.id = p.jogador4_id))))
  GROUP BY j.id, j.nome
  ORDER BY (count(p.id)) DESC;


ALTER TABLE public.vw_jogador_estatistica OWNER TO postgres;

--
-- Name: vw_jogador_estatistica_expediente; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_jogador_estatistica_expediente AS
 SELECT j.id,
    j.nome,
    count(p.id) AS partidas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) THEN 1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text)) THEN 1
            ELSE 0
        END) AS vitorias,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'B'::text)) THEN 1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'A'::text)) THEN 1
            ELSE 0
        END) AS derrotas,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) OR (j.id = p.jogador3_id)) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'AB'::text)) THEN 1
            ELSE 0
        END) AS empates,
    sum(
        CASE
            WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)) OR ((p.jogadorbct = 3) AND (j.id = p.jogador3_id)) OR ((p.jogadorbct = 4) AND (j.id = p.jogador4_id)))) THEN 1
            ELSE 0
        END) AS merda,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND ((p.jogadas ~~* '%C%'::text) OR (p.jogadas ~~* '%L%'::text))) THEN 1
            ELSE 0
        END) AS merito,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%L%'::text)) THEN 1
            ELSE 0
        END) AS laelo,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%C%'::text)) THEN 1
            ELSE 0
        END) AS cruzada,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) THEN p.placar1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_vitoria,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'B'::text)) THEN p.placar1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'A'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_derrota
   FROM (public.jogador j
     LEFT JOIN ( SELECT vw_partida_com_vencedor.id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador1_id,
            vw_partida_com_vencedor.jogador2_id,
            vw_partida_com_vencedor.jogador3_id,
            vw_partida_com_vencedor.jogador4_id,
            vw_partida_com_vencedor.placar1,
            vw_partida_com_vencedor.placar2,
            vw_partida_com_vencedor.jogadorbct,
            vw_partida_com_vencedor.jogadas,
            vw_partida_com_vencedor.dupla_vencedora
           FROM public.vw_partida_com_vencedor
          WHERE (((vw_partida_com_vencedor.data_hora)::time without time zone >= '12:00:00'::time without time zone) AND ((vw_partida_com_vencedor.data_hora)::time without time zone <= '13:10:00'::time without time zone))) p ON (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id) OR (j.id = p.jogador3_id) OR (j.id = p.jogador4_id))))
  GROUP BY j.id, j.nome
  ORDER BY (count(p.id)) DESC;


ALTER TABLE public.vw_jogador_estatistica_expediente OWNER TO postgres;

--
-- Name: vw_jogador_estatistica_expediente_ultimos_jogos; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_jogador_estatistica_expediente_ultimos_jogos AS
 WITH partidas_expandidas AS (
         SELECT vw_partida_com_vencedor.id AS partida_id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador1_id AS jogador_id
           FROM public.vw_partida_com_vencedor
          WHERE (((vw_partida_com_vencedor.data_hora)::time without time zone >= '12:00:00'::time without time zone) AND ((vw_partida_com_vencedor.data_hora)::time without time zone <= '13:10:00'::time without time zone))
        UNION ALL
         SELECT vw_partida_com_vencedor.id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador2_id
           FROM public.vw_partida_com_vencedor
          WHERE (((vw_partida_com_vencedor.data_hora)::time without time zone >= '12:00:00'::time without time zone) AND ((vw_partida_com_vencedor.data_hora)::time without time zone <= '13:10:00'::time without time zone))
        UNION ALL
         SELECT vw_partida_com_vencedor.id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador3_id
           FROM public.vw_partida_com_vencedor
          WHERE (((vw_partida_com_vencedor.data_hora)::time without time zone >= '12:00:00'::time without time zone) AND ((vw_partida_com_vencedor.data_hora)::time without time zone <= '13:10:00'::time without time zone))
        UNION ALL
         SELECT vw_partida_com_vencedor.id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador4_id
           FROM public.vw_partida_com_vencedor
          WHERE (((vw_partida_com_vencedor.data_hora)::time without time zone >= '12:00:00'::time without time zone) AND ((vw_partida_com_vencedor.data_hora)::time without time zone <= '13:10:00'::time without time zone))
        ), ranked_participacoes AS (
         SELECT partidas_expandidas.jogador_id,
            partidas_expandidas.partida_id,
            partidas_expandidas.data_hora,
            row_number() OVER (PARTITION BY partidas_expandidas.jogador_id ORDER BY partidas_expandidas.data_hora DESC) AS rn
           FROM partidas_expandidas
        ), partidas_filtradas AS (
         SELECT ranked_participacoes.jogador_id,
            ranked_participacoes.partida_id
           FROM ranked_participacoes
          WHERE (ranked_participacoes.rn <= 25)
        ), qtd_partidas_utilizadas AS (
         SELECT partidas_filtradas.jogador_id,
            count(*) AS qtd_partidas_utilizadas
           FROM partidas_filtradas
          GROUP BY partidas_filtradas.jogador_id
        ), partidas_jogador_filtradas AS (
         SELECT DISTINCT p_1.id,
            p_1.data_hora,
            p_1.jogador1_id,
            p_1.jogador2_id,
            p_1.jogador3_id,
            p_1.jogador4_id,
            p_1.placar1,
            p_1.placar2,
            p_1.jogadorbct,
            p_1.jogadas,
            p_1.dupla_vencedora
           FROM (public.vw_partida_com_vencedor p_1
             JOIN partidas_filtradas pf_1 ON ((p_1.id = pf_1.partida_id)))
        )
 SELECT j.id,
    j.nome,
    count(*) AS partidas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) THEN 1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text)) THEN 1
            ELSE 0
        END) AS vitorias,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'B'::text)) THEN 1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'A'::text)) THEN 1
            ELSE 0
        END) AS derrotas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id) OR (j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'AB'::text)) THEN 1
            ELSE 0
        END) AS empates,
    sum(
        CASE
            WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)) OR ((p.jogadorbct = 3) AND (j.id = p.jogador3_id)) OR ((p.jogadorbct = 4) AND (j.id = p.jogador4_id)))) THEN 1
            ELSE 0
        END) AS merda,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND ((p.jogadas ~~* '%C%'::text) OR (p.jogadas ~~* '%L%'::text))) THEN 1
            ELSE 0
        END) AS merito,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%L%'::text)) THEN 1
            ELSE 0
        END) AS laelo,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%C%'::text)) THEN 1
            ELSE 0
        END) AS cruzada,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) THEN p.placar1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_vitoria,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'B'::text)) THEN p.placar1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'A'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_derrota
   FROM ((public.jogador j
     JOIN partidas_filtradas pf ON ((j.id = pf.jogador_id)))
     JOIN partidas_jogador_filtradas p ON ((pf.partida_id = p.id)))
  GROUP BY j.id, j.nome
  ORDER BY (count(*)) DESC;


ALTER TABLE public.vw_jogador_estatistica_expediente_ultimos_jogos OWNER TO postgres;

--
-- Name: vw_jogador_estatistica_fora_expediente; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_jogador_estatistica_fora_expediente AS
 SELECT j.id,
    j.nome,
    count(p.id) AS partidas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) THEN 1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text)) THEN 1
            ELSE 0
        END) AS vitorias,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'B'::text)) THEN 1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'A'::text)) THEN 1
            ELSE 0
        END) AS derrotas,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) OR (j.id = p.jogador3_id)) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'AB'::text)) THEN 1
            ELSE 0
        END) AS empates,
    sum(
        CASE
            WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)) OR ((p.jogadorbct = 3) AND (j.id = p.jogador3_id)) OR ((p.jogadorbct = 4) AND (j.id = p.jogador4_id)))) THEN 1
            ELSE 0
        END) AS merda,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND ((p.jogadas ~~* '%C%'::text) OR (p.jogadas ~~* '%L%'::text))) THEN 1
            ELSE 0
        END) AS merito,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%L%'::text)) THEN 1
            ELSE 0
        END) AS laelo,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%C%'::text)) THEN 1
            ELSE 0
        END) AS cruzada,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) THEN p.placar1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_vitoria,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'B'::text)) THEN p.placar1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'A'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_derrota
   FROM (public.jogador j
     LEFT JOIN ( SELECT vw_partida_com_vencedor.id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador1_id,
            vw_partida_com_vencedor.jogador2_id,
            vw_partida_com_vencedor.jogador3_id,
            vw_partida_com_vencedor.jogador4_id,
            vw_partida_com_vencedor.placar1,
            vw_partida_com_vencedor.placar2,
            vw_partida_com_vencedor.jogadorbct,
            vw_partida_com_vencedor.jogadas,
            vw_partida_com_vencedor.dupla_vencedora
           FROM public.vw_partida_com_vencedor
          WHERE (((vw_partida_com_vencedor.data_hora)::time without time zone < '12:00:00'::time without time zone) OR ((vw_partida_com_vencedor.data_hora)::time without time zone > '13:10:00'::time without time zone))) p ON (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id) OR (j.id = p.jogador3_id) OR (j.id = p.jogador4_id))))
  GROUP BY j.id, j.nome
  ORDER BY (count(p.id)) DESC;


ALTER TABLE public.vw_jogador_estatistica_fora_expediente OWNER TO postgres;

--
-- Name: vw_jogador_estatistica_fora_expediente_ultimos_jogos; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_jogador_estatistica_fora_expediente_ultimos_jogos AS
 WITH partidas_expandidas AS (
         SELECT vw_partida_com_vencedor.id AS partida_id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador1_id AS jogador_id
           FROM public.vw_partida_com_vencedor
          WHERE (((vw_partida_com_vencedor.data_hora)::time without time zone < '12:00:00'::time without time zone) OR ((vw_partida_com_vencedor.data_hora)::time without time zone > '13:10:00'::time without time zone))
        UNION ALL
         SELECT vw_partida_com_vencedor.id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador2_id
           FROM public.vw_partida_com_vencedor
          WHERE (((vw_partida_com_vencedor.data_hora)::time without time zone < '12:00:00'::time without time zone) OR ((vw_partida_com_vencedor.data_hora)::time without time zone > '13:10:00'::time without time zone))
        UNION ALL
         SELECT vw_partida_com_vencedor.id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador3_id
           FROM public.vw_partida_com_vencedor
          WHERE (((vw_partida_com_vencedor.data_hora)::time without time zone < '12:00:00'::time without time zone) OR ((vw_partida_com_vencedor.data_hora)::time without time zone > '13:10:00'::time without time zone))
        UNION ALL
         SELECT vw_partida_com_vencedor.id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador4_id
           FROM public.vw_partida_com_vencedor
          WHERE (((vw_partida_com_vencedor.data_hora)::time without time zone < '12:00:00'::time without time zone) OR ((vw_partida_com_vencedor.data_hora)::time without time zone > '13:10:00'::time without time zone))
        ), ranked_participacoes AS (
         SELECT partidas_expandidas.jogador_id,
            partidas_expandidas.partida_id,
            partidas_expandidas.data_hora,
            row_number() OVER (PARTITION BY partidas_expandidas.jogador_id ORDER BY partidas_expandidas.data_hora DESC) AS rn
           FROM partidas_expandidas
        ), partidas_filtradas AS (
         SELECT DISTINCT ranked_participacoes.partida_id,
            ranked_participacoes.jogador_id
           FROM ranked_participacoes
          WHERE (ranked_participacoes.rn <= 25)
        ), qtd_partidas_utilizadas AS (
         SELECT partidas_filtradas.jogador_id,
            count(*) AS qtd_partidas_utilizadas
           FROM partidas_filtradas
          GROUP BY partidas_filtradas.jogador_id
        ), partidas_jogador_filtradas AS (
         SELECT p_1.id,
            p_1.data_hora,
            p_1.jogador1_id,
            p_1.jogador2_id,
            p_1.jogador3_id,
            p_1.jogador4_id,
            p_1.placar1,
            p_1.placar2,
            p_1.jogadorbct,
            p_1.jogadas,
            p_1.dupla_vencedora,
            f.jogador_id AS jogador_filtrado_id
           FROM (public.vw_partida_com_vencedor p_1
             JOIN partidas_filtradas f ON ((p_1.id = f.partida_id)))
        )
 SELECT j.id,
    j.nome,
    count(*) AS partidas,
    q.qtd_partidas_utilizadas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) THEN 1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text)) THEN 1
            ELSE 0
        END) AS vitorias,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'B'::text)) THEN 1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'A'::text)) THEN 1
            ELSE 0
        END) AS derrotas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id) OR (j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'AB'::text)) THEN 1
            ELSE 0
        END) AS empates,
    sum(
        CASE
            WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)) OR ((p.jogadorbct = 3) AND (j.id = p.jogador3_id)) OR ((p.jogadorbct = 4) AND (j.id = p.jogador4_id)))) THEN 1
            ELSE 0
        END) AS merda,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND ((p.jogadas ~~* '%C%'::text) OR (p.jogadas ~~* '%L%'::text))) THEN 1
            ELSE 0
        END) AS merito,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%L%'::text)) THEN 1
            ELSE 0
        END) AS laelo,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%C%'::text)) THEN 1
            ELSE 0
        END) AS cruzada,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) THEN p.placar1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_vitoria,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'B'::text)) THEN p.placar1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'A'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_derrota
   FROM ((public.jogador j
     LEFT JOIN partidas_jogador_filtradas p ON ((j.id = p.jogador_filtrado_id)))
     LEFT JOIN qtd_partidas_utilizadas q ON ((j.id = q.jogador_id)))
  GROUP BY j.id, j.nome, q.qtd_partidas_utilizadas
  ORDER BY (count(*)) DESC;


ALTER TABLE public.vw_jogador_estatistica_fora_expediente_ultimos_jogos OWNER TO postgres;

--
-- Name: vw_jogador_estatistica_sinuca; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_jogador_estatistica_sinuca AS
 SELECT j.id,
    j.nome,
    count(p.id) AS partidas_sinuca,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN 1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN 1
            ELSE 0
        END) AS vitorias,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'B'::text)) THEN 1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'A'::text)) THEN 1
            ELSE 0
        END) AS derrotas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.vencedor = 'AB'::text)) THEN 1
            ELSE 0
        END) AS empates,
    sum(
        CASE
            WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)))) THEN 1
            ELSE 0
        END) AS merda,
    sum(
        CASE
            WHEN (((p.vencedor = 'A'::text) AND (p.placar2 = 0) AND (p.jogador1_id = j.id)) OR ((p.vencedor = 'B'::text) AND (p.placar1 = 0) AND (p.jogador2_id = j.id))) THEN 1
            ELSE 0
        END) AS merito,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN p.placar1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_vitoria,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'B'::text)) THEN p.placar1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'A'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_derrota
   FROM (public.jogador j
     LEFT JOIN public.vw_partida_sinuca_com_vencedor p ON (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id))))
  GROUP BY j.id, j.nome
  ORDER BY (count(p.id)) DESC;


ALTER TABLE public.vw_jogador_estatistica_sinuca OWNER TO postgres;

--
-- Name: vw_jogador_estatistica_sinuca_expediente; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_jogador_estatistica_sinuca_expediente AS
 SELECT j.id,
    j.nome,
    count(p.id) AS partidas_sinuca,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN 1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN 1
            ELSE 0
        END) AS vitorias,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'B'::text)) THEN 1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'A'::text)) THEN 1
            ELSE 0
        END) AS derrotas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.vencedor = 'AB'::text)) THEN 1
            ELSE 0
        END) AS empates,
    sum(
        CASE
            WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)))) THEN 1
            ELSE 0
        END) AS merda,
    sum(
        CASE
            WHEN (((p.vencedor = 'A'::text) AND (p.placar2 = 0) AND (p.jogador1_id = j.id)) OR ((p.vencedor = 'B'::text) AND (p.placar1 = 0) AND (p.jogador2_id = j.id))) THEN 1
            ELSE 0
        END) AS merito,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN p.placar1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_vitoria,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'B'::text)) THEN p.placar1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'A'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_derrota
   FROM (public.jogador j
     LEFT JOIN ( SELECT vw_partida_sinuca_com_vencedor.id,
            vw_partida_sinuca_com_vencedor.data_hora,
            vw_partida_sinuca_com_vencedor.jogador1_id,
            vw_partida_sinuca_com_vencedor.jogador2_id,
            vw_partida_sinuca_com_vencedor.placar1,
            vw_partida_sinuca_com_vencedor.placar2,
            vw_partida_sinuca_com_vencedor.jogadorbct,
            vw_partida_sinuca_com_vencedor.vencedor
           FROM public.vw_partida_sinuca_com_vencedor
          WHERE (((vw_partida_sinuca_com_vencedor.data_hora)::time without time zone >= '12:00:00'::time without time zone) AND ((vw_partida_sinuca_com_vencedor.data_hora)::time without time zone <= '13:10:00'::time without time zone))) p ON (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id))))
  GROUP BY j.id, j.nome
  ORDER BY (count(p.id)) DESC;


ALTER TABLE public.vw_jogador_estatistica_sinuca_expediente OWNER TO postgres;

--
-- Name: vw_jogador_estatistica_sinuca_expediente_ultimos_jogos; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_jogador_estatistica_sinuca_expediente_ultimos_jogos AS
 WITH partidas_expandidas AS (
         SELECT vw_partida_sinuca_com_vencedor.id AS partida_id,
            vw_partida_sinuca_com_vencedor.data_hora,
            vw_partida_sinuca_com_vencedor.jogador1_id AS jogador_id
           FROM public.vw_partida_sinuca_com_vencedor
          WHERE (((vw_partida_sinuca_com_vencedor.data_hora)::time without time zone >= '12:00:00'::time without time zone) AND ((vw_partida_sinuca_com_vencedor.data_hora)::time without time zone <= '13:10:00'::time without time zone))
        UNION ALL
         SELECT vw_partida_sinuca_com_vencedor.id,
            vw_partida_sinuca_com_vencedor.data_hora,
            vw_partida_sinuca_com_vencedor.jogador2_id
           FROM public.vw_partida_sinuca_com_vencedor
          WHERE (((vw_partida_sinuca_com_vencedor.data_hora)::time without time zone >= '12:00:00'::time without time zone) AND ((vw_partida_sinuca_com_vencedor.data_hora)::time without time zone <= '13:10:00'::time without time zone))
        ), ranked_participacoes AS (
         SELECT partidas_expandidas.jogador_id,
            partidas_expandidas.partida_id,
            partidas_expandidas.data_hora,
            row_number() OVER (PARTITION BY partidas_expandidas.jogador_id ORDER BY partidas_expandidas.data_hora DESC) AS rn
           FROM partidas_expandidas
        ), partidas_filtradas AS (
         SELECT ranked_participacoes.jogador_id,
            ranked_participacoes.partida_id
           FROM ranked_participacoes
          WHERE (ranked_participacoes.rn <= 20)
        ), partidas_jogador_filtradas AS (
         SELECT f.jogador_id AS jogador_id_base,
            p_1.id,
            p_1.data_hora,
            p_1.jogador1_id,
            p_1.jogador2_id,
            p_1.placar1,
            p_1.placar2,
            p_1.jogadorbct,
            p_1.vencedor
           FROM (partidas_filtradas f
             JOIN public.vw_partida_sinuca_com_vencedor p_1 ON ((f.partida_id = p_1.id)))
        )
 SELECT j.id,
    j.nome,
    count(p.id) AS qtd_partidas_utilizadas,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN 1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN 1
            ELSE 0
        END) AS vitorias,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'B'::text)) THEN 1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'A'::text)) THEN 1
            ELSE 0
        END) AS derrotas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.vencedor = 'AB'::text)) THEN 1
            ELSE 0
        END) AS empates,
    sum(
        CASE
            WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)))) THEN 1
            ELSE 0
        END) AS merda,
    sum(
        CASE
            WHEN (((p.vencedor = 'A'::text) AND (p.placar2 = 0) AND (p.jogador1_id = j.id)) OR ((p.vencedor = 'B'::text) AND (p.placar1 = 0) AND (p.jogador2_id = j.id))) THEN 1
            ELSE 0
        END) AS merito,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN p.placar1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_vitoria,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'B'::text)) THEN p.placar1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'A'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_derrota
   FROM (public.jogador j
     JOIN partidas_jogador_filtradas p ON ((j.id = p.jogador_id_base)))
  GROUP BY j.id, j.nome
  ORDER BY (count(p.id)) DESC;


ALTER TABLE public.vw_jogador_estatistica_sinuca_expediente_ultimos_jogos OWNER TO postgres;

--
-- Name: vw_jogador_estatistica_sinuca_fora_expediente; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_jogador_estatistica_sinuca_fora_expediente AS
 SELECT j.id,
    j.nome,
    count(p.id) AS partidas_sinuca,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN 1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN 1
            ELSE 0
        END) AS vitorias,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'B'::text)) THEN 1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'A'::text)) THEN 1
            ELSE 0
        END) AS derrotas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.vencedor = 'AB'::text)) THEN 1
            ELSE 0
        END) AS empates,
    sum(
        CASE
            WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)))) THEN 1
            ELSE 0
        END) AS merda,
    sum(
        CASE
            WHEN (((p.vencedor = 'A'::text) AND (p.placar2 = 0) AND (p.placar1 >= 4) AND (p.jogador1_id = j.id)) OR ((p.vencedor = 'B'::text) AND (p.placar1 = 0) AND (p.placar2 >= 4) AND (p.jogador2_id = j.id))) THEN 1
            ELSE 0
        END) AS merito,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN p.placar1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_vitoria,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'B'::text)) THEN p.placar1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'A'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_derrota
   FROM (public.jogador j
     LEFT JOIN ( SELECT vw_partida_sinuca_com_vencedor.id,
            vw_partida_sinuca_com_vencedor.data_hora,
            vw_partida_sinuca_com_vencedor.jogador1_id,
            vw_partida_sinuca_com_vencedor.jogador2_id,
            vw_partida_sinuca_com_vencedor.placar1,
            vw_partida_sinuca_com_vencedor.placar2,
            vw_partida_sinuca_com_vencedor.jogadorbct,
            vw_partida_sinuca_com_vencedor.vencedor
           FROM public.vw_partida_sinuca_com_vencedor
          WHERE (((vw_partida_sinuca_com_vencedor.data_hora)::time without time zone < '12:00:00'::time without time zone) OR ((vw_partida_sinuca_com_vencedor.data_hora)::time without time zone > '13:10:00'::time without time zone))) p ON (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id))))
  GROUP BY j.id, j.nome
  ORDER BY (count(p.id)) DESC;


ALTER TABLE public.vw_jogador_estatistica_sinuca_fora_expediente OWNER TO postgres;

--
-- Name: vw_jogador_estatistica_sinuca_fora_expediente_ultimos_jogos; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_jogador_estatistica_sinuca_fora_expediente_ultimos_jogos AS
 WITH partidas_expandidas AS (
         SELECT v.id AS partida_id,
            v.data_hora,
            v.jogador1_id AS jogador_id
           FROM public.vw_partida_sinuca_com_vencedor v
          WHERE (((v.data_hora)::time without time zone < '12:00:00'::time without time zone) OR ((v.data_hora)::time without time zone > '13:10:00'::time without time zone))
        UNION ALL
         SELECT v.id,
            v.data_hora,
            v.jogador2_id
           FROM public.vw_partida_sinuca_com_vencedor v
          WHERE (((v.data_hora)::time without time zone < '12:00:00'::time without time zone) OR ((v.data_hora)::time without time zone > '13:10:00'::time without time zone))
        ), ranked_participacoes AS (
         SELECT p_1.jogador_id,
            p_1.partida_id,
            p_1.data_hora,
            row_number() OVER (PARTITION BY p_1.jogador_id ORDER BY p_1.data_hora DESC) AS rn
           FROM partidas_expandidas p_1
        ), partidas_filtradas AS (
         SELECT ranked_participacoes.jogador_id,
            ranked_participacoes.partida_id
           FROM ranked_participacoes
          WHERE (ranked_participacoes.rn <= 20)
        ), partidas_jogador_filtradas AS (
         SELECT f.jogador_id AS jogador_id_base,
            p1.id AS partida_id,
            p1.data_hora,
            p1.jogador1_id,
            p1.jogador2_id,
            p1.placar1,
            p1.placar2,
            p1.jogadorbct,
            p1.vencedor
           FROM (partidas_filtradas f
             JOIN public.vw_partida_sinuca_com_vencedor p1 ON ((f.partida_id = p1.id)))
        )
 SELECT j.id,
    j.nome,
    count(p.partida_id) AS qtd_partidas_utilizadas,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN 1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN 1
            ELSE 0
        END) AS vitorias,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'B'::text)) THEN 1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'A'::text)) THEN 1
            ELSE 0
        END) AS derrotas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.vencedor = 'AB'::text)) THEN 1
            ELSE 0
        END) AS empates,
    sum(
        CASE
            WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)))) THEN 1
            ELSE 0
        END) AS merda,
    sum(
        CASE
            WHEN (((p.vencedor = 'A'::text) AND (p.placar2 = 0) AND (p.placar1 >= 4) AND (p.jogador1_id = j.id)) OR ((p.vencedor = 'B'::text) AND (p.placar1 = 0) AND (p.placar2 >= 4) AND (p.jogador2_id = j.id))) THEN 1
            ELSE 0
        END) AS merito,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN p.placar1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_vitoria,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'B'::text)) THEN p.placar1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'A'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_derrota
   FROM (public.jogador j
     JOIN partidas_jogador_filtradas p ON ((j.id = p.jogador_id_base)))
  GROUP BY j.id, j.nome
  ORDER BY (count(p.partida_id)) DESC;


ALTER TABLE public.vw_jogador_estatistica_sinuca_fora_expediente_ultimos_jogos OWNER TO postgres;

--
-- Name: vw_jogador_estatistica_sinuca_ultimos_jogos; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_jogador_estatistica_sinuca_ultimos_jogos AS
 WITH partidas_expandidas AS (
         SELECT vw_partida_sinuca_com_vencedor.id AS partida_id,
            vw_partida_sinuca_com_vencedor.data_hora,
            vw_partida_sinuca_com_vencedor.jogador1_id AS jogador_id
           FROM public.vw_partida_sinuca_com_vencedor
        UNION ALL
         SELECT vw_partida_sinuca_com_vencedor.id,
            vw_partida_sinuca_com_vencedor.data_hora,
            vw_partida_sinuca_com_vencedor.jogador2_id
           FROM public.vw_partida_sinuca_com_vencedor
        ), ranked_participacoes AS (
         SELECT partidas_expandidas.jogador_id,
            partidas_expandidas.partida_id,
            partidas_expandidas.data_hora,
            row_number() OVER (PARTITION BY partidas_expandidas.jogador_id ORDER BY partidas_expandidas.data_hora DESC) AS rn
           FROM partidas_expandidas
        ), partidas_filtradas AS (
         SELECT ranked_participacoes.jogador_id,
            ranked_participacoes.partida_id
           FROM ranked_participacoes
          WHERE (ranked_participacoes.rn <= 20)
        ), partidas_jogador_filtradas AS (
         SELECT f.jogador_id AS jogador_id_base,
            p_1.id,
            p_1.data_hora,
            p_1.jogador1_id,
            p_1.jogador2_id,
            p_1.placar1,
            p_1.placar2,
            p_1.jogadorbct,
            p_1.vencedor
           FROM (partidas_filtradas f
             JOIN public.vw_partida_sinuca_com_vencedor p_1 ON ((f.partida_id = p_1.id)))
        )
 SELECT j.id,
    j.nome,
    count(p.id) AS qtd_partidas_utilizadas,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN 1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN 1
            ELSE 0
        END) AS vitorias,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'B'::text)) THEN 1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'A'::text)) THEN 1
            ELSE 0
        END) AS derrotas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.vencedor = 'AB'::text)) THEN 1
            ELSE 0
        END) AS empates,
    sum(
        CASE
            WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)))) THEN 1
            ELSE 0
        END) AS merda,
    sum(
        CASE
            WHEN (((p.vencedor = 'A'::text) AND (p.placar2 = 0) AND (p.placar1 >= 4) AND (p.jogador1_id = j.id)) OR ((p.vencedor = 'B'::text) AND (p.placar1 = 0) AND (p.placar2 >= 4) AND (p.jogador2_id = j.id))) THEN 1
            ELSE 0
        END) AS merito,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) THEN p.placar1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_vitoria,
    sum(
        CASE
            WHEN ((j.id = p.jogador1_id) AND (p.vencedor = 'B'::text)) THEN p.placar1
            WHEN ((j.id = p.jogador2_id) AND (p.vencedor = 'A'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_derrota
   FROM (public.jogador j
     JOIN partidas_jogador_filtradas p ON ((j.id = p.jogador_id_base)))
  GROUP BY j.id, j.nome
  ORDER BY (count(p.id)) DESC;


ALTER TABLE public.vw_jogador_estatistica_sinuca_ultimos_jogos OWNER TO postgres;

--
-- Name: vw_jogador_estatistica_ultimos_jogos; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_jogador_estatistica_ultimos_jogos AS
 WITH partidas_expandidas AS (
         SELECT vw_partida_com_vencedor.id AS partida_id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador1_id AS jogador_id
           FROM public.vw_partida_com_vencedor
        UNION ALL
         SELECT vw_partida_com_vencedor.id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador2_id
           FROM public.vw_partida_com_vencedor
        UNION ALL
         SELECT vw_partida_com_vencedor.id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador3_id
           FROM public.vw_partida_com_vencedor
        UNION ALL
         SELECT vw_partida_com_vencedor.id,
            vw_partida_com_vencedor.data_hora,
            vw_partida_com_vencedor.jogador4_id
           FROM public.vw_partida_com_vencedor
        ), ranked_participacoes AS (
         SELECT partidas_expandidas.jogador_id,
            partidas_expandidas.partida_id,
            partidas_expandidas.data_hora,
            row_number() OVER (PARTITION BY partidas_expandidas.jogador_id ORDER BY partidas_expandidas.data_hora DESC) AS rn
           FROM partidas_expandidas
        ), partidas_filtradas AS (
         SELECT ranked_participacoes.jogador_id,
            ranked_participacoes.partida_id
           FROM ranked_participacoes
          WHERE (ranked_participacoes.rn <= 25)
        ), qtd_partidas_utilizadas AS (
         SELECT partidas_filtradas.jogador_id,
            count(*) AS qtd_partidas_utilizadas
           FROM partidas_filtradas
          GROUP BY partidas_filtradas.jogador_id
        ), partidas_jogador_filtradas AS (
         SELECT DISTINCT p_1.id,
            p_1.data_hora,
            p_1.jogador1_id,
            p_1.jogador2_id,
            p_1.jogador3_id,
            p_1.jogador4_id,
            p_1.placar1,
            p_1.placar2,
            p_1.jogadorbct,
            p_1.jogadas,
            p_1.dupla_vencedora
           FROM (public.vw_partida_com_vencedor p_1
             JOIN partidas_filtradas pf_1 ON ((p_1.id = pf_1.partida_id)))
        )
 SELECT j.id,
    j.nome,
    count(*) AS partidas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) THEN 1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text)) THEN 1
            ELSE 0
        END) AS vitorias,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'B'::text)) THEN 1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'A'::text)) THEN 1
            ELSE 0
        END) AS derrotas,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id) OR (j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'AB'::text)) THEN 1
            ELSE 0
        END) AS empates,
    sum(
        CASE
            WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)) OR ((p.jogadorbct = 3) AND (j.id = p.jogador3_id)) OR ((p.jogadorbct = 4) AND (j.id = p.jogador4_id)))) THEN 1
            ELSE 0
        END) AS merda,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND ((p.jogadas ~~* '%C%'::text) OR (p.jogadas ~~* '%L%'::text))) THEN 1
            ELSE 0
        END) AS merito,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%L%'::text)) THEN 1
            ELSE 0
        END) AS laelo,
    sum(
        CASE
            WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND (p.jogadas ~~* '%C%'::text)) THEN 1
            ELSE 0
        END) AS cruzada,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) THEN p.placar1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_vitoria,
    sum(
        CASE
            WHEN (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'B'::text)) THEN p.placar1
            WHEN (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'A'::text)) THEN p.placar2
            ELSE 0
        END) AS placar_derrota
   FROM ((public.jogador j
     JOIN partidas_filtradas pf ON ((j.id = pf.jogador_id)))
     JOIN partidas_jogador_filtradas p ON ((pf.partida_id = p.id)))
  GROUP BY j.id, j.nome
  ORDER BY (count(*)) DESC;


ALTER TABLE public.vw_jogador_estatistica_ultimos_jogos OWNER TO postgres;

--
-- Name: vw_rank_mensal; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_rank_mensal AS
 WITH estatistica_mensal AS (
         SELECT j.id AS jogador_id,
            j.nome,
            (date_part('month'::text, p.data_hora))::integer AS mes,
            (date_part('year'::text, p.data_hora))::integer AS ano,
            count(
                CASE
                    WHEN ((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) THEN 1
                    ELSE NULL::integer
                END) AS vitorias,
            sum(
                CASE
                    WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)) OR ((p.jogadorbct = 3) AND (j.id = p.jogador3_id)) OR ((p.jogadorbct = 4) AND (j.id = p.jogador4_id)))) THEN 1
                    ELSE 0
                END) AS merda,
            sum(
                CASE
                    WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND ((p.jogadas ~~* '%C%'::text) OR (p.jogadas ~~* '%L%'::text))) THEN 1
                    ELSE 0
                END) AS merito
           FROM (public.jogador j
             JOIN public.vw_partida_com_vencedor p ON (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) OR (j.id = p.jogador3_id)) OR (j.id = p.jogador4_id))))
          WHERE (p.data_hora IS NOT NULL)
          GROUP BY j.id, j.nome, (date_part('month'::text, p.data_hora)), (date_part('year'::text, p.data_hora))
        ), ranking_por_mes AS (
         SELECT em.jogador_id,
            em.nome,
            em.mes,
            em.ano,
            em.vitorias,
            em.merda,
            em.merito,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.merda DESC, em.vitorias) AS rn_merda,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.merito DESC, em.vitorias DESC) AS rn_merito,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.vitorias DESC) AS rn_vitorias
           FROM estatistica_mensal em
        ), meses_com_partidas AS (
         SELECT DISTINCT (date_part('month'::text, vw_partida_com_vencedor.data_hora))::integer AS mes,
            (date_part('year'::text, vw_partida_com_vencedor.data_hora))::integer AS ano
           FROM public.vw_partida_com_vencedor
        ), meses_numerados AS (
         SELECT meses_com_partidas.mes,
            meses_com_partidas.ano,
            row_number() OVER (ORDER BY meses_com_partidas.ano, meses_com_partidas.mes) AS id
           FROM meses_com_partidas
        ), top_mensal AS (
         SELECT DISTINCT mn.id,
            mn.mes,
            mn.ano,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS id_top_merda,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS nome_top_merda,
            first_value(rm.merda) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS merda,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS id_top_merito,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS nome_top_merito,
            first_value(rm.merito) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS merito,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS id_top_vitoria,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS nome_top_vitorias,
            first_value(rm.vitorias) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS vitorias
           FROM (ranking_por_mes rm
             JOIN meses_numerados mn ON (((rm.mes = mn.mes) AND (rm.ano = mn.ano))))
        )
 SELECT (top_mensal.id)::integer AS id,
    top_mensal.mes,
    top_mensal.ano,
    top_mensal.id_top_merda,
    top_mensal.nome_top_merda,
    top_mensal.merda,
    top_mensal.id_top_merito,
    top_mensal.nome_top_merito,
    top_mensal.merito,
    top_mensal.id_top_vitoria,
    top_mensal.nome_top_vitorias,
    top_mensal.vitorias
   FROM top_mensal
  ORDER BY top_mensal.ano DESC, top_mensal.mes DESC;


ALTER TABLE public.vw_rank_mensal OWNER TO postgres;

--
-- Name: vw_rank_mensal_expediente; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_rank_mensal_expediente AS
 WITH estatistica_mensal AS (
         SELECT j.id AS jogador_id,
            j.nome,
            (date_part('month'::text, p.data_hora))::integer AS mes,
            (date_part('year'::text, p.data_hora))::integer AS ano,
            count(
                CASE
                    WHEN ((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) THEN 1
                    ELSE NULL::integer
                END) AS vitorias,
            sum(
                CASE
                    WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)) OR ((p.jogadorbct = 3) AND (j.id = p.jogador3_id)) OR ((p.jogadorbct = 4) AND (j.id = p.jogador4_id)))) THEN 1
                    ELSE 0
                END) AS merda,
            sum(
                CASE
                    WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND ((p.jogadas ~~* '%C%'::text) OR (p.jogadas ~~* '%L%'::text))) THEN 1
                    ELSE 0
                END) AS merito
           FROM (public.jogador j
             JOIN public.vw_partida_com_vencedor p ON (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) OR (j.id = p.jogador3_id)) OR (j.id = p.jogador4_id))))
          WHERE ((p.data_hora IS NOT NULL) AND (to_char(p.data_hora, 'HH24:MI'::text) >= '12:00'::text) AND (to_char(p.data_hora, 'HH24:MI'::text) <= '13:10'::text))
          GROUP BY j.id, j.nome, (date_part('month'::text, p.data_hora)), (date_part('year'::text, p.data_hora))
        ), ranking_por_mes AS (
         SELECT em.jogador_id,
            em.nome,
            em.mes,
            em.ano,
            em.vitorias,
            em.merda,
            em.merito,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.merda DESC, em.vitorias) AS rn_merda,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.merito DESC, em.vitorias DESC) AS rn_merito,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.vitorias DESC) AS rn_vitorias
           FROM estatistica_mensal em
        ), meses_com_partidas AS (
         SELECT DISTINCT (date_part('month'::text, vw_partida_com_vencedor.data_hora))::integer AS mes,
            (date_part('year'::text, vw_partida_com_vencedor.data_hora))::integer AS ano
           FROM public.vw_partida_com_vencedor
          WHERE ((to_char(vw_partida_com_vencedor.data_hora, 'HH24:MI'::text) >= '12:00'::text) AND (to_char(vw_partida_com_vencedor.data_hora, 'HH24:MI'::text) <= '13:10'::text))
        ), meses_numerados AS (
         SELECT meses_com_partidas.mes,
            meses_com_partidas.ano,
            row_number() OVER (ORDER BY meses_com_partidas.ano, meses_com_partidas.mes) AS id
           FROM meses_com_partidas
        ), top_mensal AS (
         SELECT DISTINCT mn.id,
            mn.mes,
            mn.ano,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS id_top_merda,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS nome_top_merda,
            first_value(rm.merda) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS merda,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS id_top_merito,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS nome_top_merito,
            first_value(rm.merito) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS merito,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS id_top_vitoria,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS nome_top_vitorias,
            first_value(rm.vitorias) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS vitorias
           FROM (ranking_por_mes rm
             JOIN meses_numerados mn ON (((rm.mes = mn.mes) AND (rm.ano = mn.ano))))
        )
 SELECT top_mensal.id,
    top_mensal.mes,
    top_mensal.ano,
    top_mensal.id_top_merda,
    top_mensal.nome_top_merda,
    top_mensal.merda,
    top_mensal.id_top_merito,
    top_mensal.nome_top_merito,
    top_mensal.merito,
    top_mensal.id_top_vitoria,
    top_mensal.nome_top_vitorias,
    top_mensal.vitorias
   FROM top_mensal
  ORDER BY top_mensal.ano DESC, top_mensal.mes DESC;


ALTER TABLE public.vw_rank_mensal_expediente OWNER TO postgres;

--
-- Name: vw_rank_mensal_fora_expediente; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_rank_mensal_fora_expediente AS
 WITH estatistica_mensal AS (
         SELECT j.id AS jogador_id,
            j.nome,
            (date_part('month'::text, p.data_hora))::integer AS mes,
            (date_part('year'::text, p.data_hora))::integer AS ano,
            count(
                CASE
                    WHEN ((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) THEN 1
                    ELSE NULL::integer
                END) AS vitorias,
            sum(
                CASE
                    WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)) OR ((p.jogadorbct = 3) AND (j.id = p.jogador3_id)) OR ((p.jogadorbct = 4) AND (j.id = p.jogador4_id)))) THEN 1
                    ELSE 0
                END) AS merda,
            sum(
                CASE
                    WHEN (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) AND (p.dupla_vencedora = 'A'::text)) OR (((j.id = p.jogador3_id) OR (j.id = p.jogador4_id)) AND (p.dupla_vencedora = 'B'::text))) AND ((p.jogadas ~~* '%C%'::text) OR (p.jogadas ~~* '%L%'::text))) THEN 1
                    ELSE 0
                END) AS merito
           FROM (public.jogador j
             JOIN public.vw_partida_com_vencedor p ON (((((j.id = p.jogador1_id) OR (j.id = p.jogador2_id)) OR (j.id = p.jogador3_id)) OR (j.id = p.jogador4_id))))
          WHERE ((p.data_hora IS NOT NULL) AND ((to_char(p.data_hora, 'HH24:MI'::text) < '12:00'::text) OR (to_char(p.data_hora, 'HH24:MI'::text) > '13:10'::text)))
          GROUP BY j.id, j.nome, (date_part('month'::text, p.data_hora)), (date_part('year'::text, p.data_hora))
        ), ranking_por_mes AS (
         SELECT em.jogador_id,
            em.nome,
            em.mes,
            em.ano,
            em.vitorias,
            em.merda,
            em.merito,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.merda DESC, em.vitorias) AS rn_merda,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.merito DESC, em.vitorias DESC) AS rn_merito,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.vitorias DESC) AS rn_vitorias
           FROM estatistica_mensal em
        ), meses_com_partidas AS (
         SELECT DISTINCT (date_part('month'::text, vw_partida_com_vencedor.data_hora))::integer AS mes,
            (date_part('year'::text, vw_partida_com_vencedor.data_hora))::integer AS ano
           FROM public.vw_partida_com_vencedor
          WHERE ((to_char(vw_partida_com_vencedor.data_hora, 'HH24:MI'::text) >= '12:00'::text) AND (to_char(vw_partida_com_vencedor.data_hora, 'HH24:MI'::text) <= '13:10'::text))
        ), meses_numerados AS (
         SELECT meses_com_partidas.mes,
            meses_com_partidas.ano,
            row_number() OVER (ORDER BY meses_com_partidas.ano, meses_com_partidas.mes) AS id
           FROM meses_com_partidas
        ), top_mensal AS (
         SELECT DISTINCT mn.id,
            mn.mes,
            mn.ano,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS id_top_merda,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS nome_top_merda,
            first_value(rm.merda) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS merda,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS id_top_merito,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS nome_top_merito,
            first_value(rm.merito) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS merito,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS id_top_vitoria,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS nome_top_vitorias,
            first_value(rm.vitorias) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS vitorias
           FROM (ranking_por_mes rm
             JOIN meses_numerados mn ON (((rm.mes = mn.mes) AND (rm.ano = mn.ano))))
        )
 SELECT top_mensal.id,
    top_mensal.mes,
    top_mensal.ano,
    top_mensal.id_top_merda,
    top_mensal.nome_top_merda,
    top_mensal.merda,
    top_mensal.id_top_merito,
    top_mensal.nome_top_merito,
    top_mensal.merito,
    top_mensal.id_top_vitoria,
    top_mensal.nome_top_vitorias,
    top_mensal.vitorias
   FROM top_mensal
  ORDER BY top_mensal.ano DESC, top_mensal.mes DESC;


ALTER TABLE public.vw_rank_mensal_fora_expediente OWNER TO postgres;

--
-- Name: vw_rank_sinuca_mensal; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_rank_sinuca_mensal AS
 WITH estatistica_mensal AS (
         SELECT j.id AS jogador_id,
            j.nome,
            (date_part('month'::text, p.data_hora))::integer AS mes,
            (date_part('year'::text, p.data_hora))::integer AS ano,
            count(
                CASE
                    WHEN (((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) OR ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text))) THEN 1
                    ELSE NULL::integer
                END) AS vitorias,
            sum(
                CASE
                    WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)))) THEN 1
                    ELSE 0
                END) AS merda,
            sum(
                CASE
                    WHEN (((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text) AND (p.placar1 >= 4) AND (p.placar2 = 0)) OR ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text) AND (p.placar2 >= 4) AND (p.placar1 = 0))) THEN 1
                    ELSE 0
                END) AS merito
           FROM (public.jogador j
             JOIN public.vw_partida_sinuca_com_vencedor p ON (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id))))
          WHERE (p.data_hora IS NOT NULL)
          GROUP BY j.id, j.nome, (date_part('month'::text, p.data_hora)), (date_part('year'::text, p.data_hora))
        ), ranking_por_mes AS (
         SELECT em.jogador_id,
            em.nome,
            em.mes,
            em.ano,
            em.vitorias,
            em.merda,
            em.merito,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.merda DESC, em.vitorias) AS rn_merda,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.merito DESC, em.vitorias DESC) AS rn_merito,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.vitorias DESC) AS rn_vitorias
           FROM estatistica_mensal em
        ), meses_com_partidas AS (
         SELECT DISTINCT (date_part('month'::text, vw_partida_sinuca_com_vencedor.data_hora))::integer AS mes,
            (date_part('year'::text, vw_partida_sinuca_com_vencedor.data_hora))::integer AS ano
           FROM public.vw_partida_sinuca_com_vencedor
        ), meses_numerados AS (
         SELECT meses_com_partidas.mes,
            meses_com_partidas.ano,
            row_number() OVER (ORDER BY meses_com_partidas.ano, meses_com_partidas.mes) AS id
           FROM meses_com_partidas
        ), top_mensal AS (
         SELECT DISTINCT mn.id,
            mn.mes,
            mn.ano,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS id_top_merda,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS nome_top_merda,
            first_value(rm.merda) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS merda,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS id_top_merito,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS nome_top_merito,
            first_value(rm.merito) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS merito,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS id_top_vitoria,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS nome_top_vitorias,
            first_value(rm.vitorias) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS vitorias
           FROM (ranking_por_mes rm
             JOIN meses_numerados mn ON (((rm.mes = mn.mes) AND (rm.ano = mn.ano))))
        )
 SELECT top_mensal.id,
    top_mensal.mes,
    top_mensal.ano,
    top_mensal.id_top_merda,
    top_mensal.nome_top_merda,
    top_mensal.merda,
    top_mensal.id_top_merito,
    top_mensal.nome_top_merito,
    top_mensal.merito,
    top_mensal.id_top_vitoria,
    top_mensal.nome_top_vitorias,
    top_mensal.vitorias
   FROM top_mensal
  ORDER BY top_mensal.ano DESC, top_mensal.mes DESC;


ALTER TABLE public.vw_rank_sinuca_mensal OWNER TO postgres;

--
-- Name: vw_rank_sinuca_mensal_expediente; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_rank_sinuca_mensal_expediente AS
 WITH estatistica_mensal AS (
         SELECT j.id AS jogador_id,
            j.nome,
            (date_part('month'::text, p.data_hora))::integer AS mes,
            (date_part('year'::text, p.data_hora))::integer AS ano,
            count(
                CASE
                    WHEN (((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) OR ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text))) THEN 1
                    ELSE NULL::integer
                END) AS vitorias,
            sum(
                CASE
                    WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)))) THEN 1
                    ELSE 0
                END) AS merda,
            sum(
                CASE
                    WHEN (((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text) AND (p.placar1 >= 4) AND (p.placar2 = 0)) OR ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text) AND (p.placar2 >= 4) AND (p.placar1 = 0))) THEN 1
                    ELSE 0
                END) AS merito
           FROM (public.jogador j
             JOIN public.vw_partida_sinuca_com_vencedor p ON (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id))))
          WHERE ((p.data_hora IS NOT NULL) AND (to_char(p.data_hora, 'HH24:MI'::text) >= '12:00'::text) AND (to_char(p.data_hora, 'HH24:MI'::text) <= '13:10'::text))
          GROUP BY j.id, j.nome, (date_part('month'::text, p.data_hora)), (date_part('year'::text, p.data_hora))
        ), ranking_por_mes AS (
         SELECT em.jogador_id,
            em.nome,
            em.mes,
            em.ano,
            em.vitorias,
            em.merda,
            em.merito,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.merda DESC, em.vitorias) AS rn_merda,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.merito DESC, em.vitorias DESC) AS rn_merito,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.vitorias DESC) AS rn_vitorias
           FROM estatistica_mensal em
        ), meses_com_partidas AS (
         SELECT DISTINCT (date_part('month'::text, vw_partida_sinuca_com_vencedor.data_hora))::integer AS mes,
            (date_part('year'::text, vw_partida_sinuca_com_vencedor.data_hora))::integer AS ano
           FROM public.vw_partida_sinuca_com_vencedor
          WHERE ((to_char(vw_partida_sinuca_com_vencedor.data_hora, 'HH24:MI'::text) >= '12:00'::text) AND (to_char(vw_partida_sinuca_com_vencedor.data_hora, 'HH24:MI'::text) <= '13:10'::text))
        ), meses_numerados AS (
         SELECT meses_com_partidas.mes,
            meses_com_partidas.ano,
            row_number() OVER (ORDER BY meses_com_partidas.ano, meses_com_partidas.mes) AS id
           FROM meses_com_partidas
        ), top_mensal AS (
         SELECT DISTINCT mn.id,
            mn.mes,
            mn.ano,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS id_top_merda,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS nome_top_merda,
            first_value(rm.merda) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS merda,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS id_top_merito,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS nome_top_merito,
            first_value(rm.merito) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS merito,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS id_top_vitoria,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS nome_top_vitorias,
            first_value(rm.vitorias) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS vitorias
           FROM (ranking_por_mes rm
             JOIN meses_numerados mn ON (((rm.mes = mn.mes) AND (rm.ano = mn.ano))))
        )
 SELECT top_mensal.id,
    top_mensal.mes,
    top_mensal.ano,
    top_mensal.id_top_merda,
    top_mensal.nome_top_merda,
    top_mensal.merda,
    top_mensal.id_top_merito,
    top_mensal.nome_top_merito,
    top_mensal.merito,
    top_mensal.id_top_vitoria,
    top_mensal.nome_top_vitorias,
    top_mensal.vitorias
   FROM top_mensal
  ORDER BY top_mensal.ano DESC, top_mensal.mes DESC;


ALTER TABLE public.vw_rank_sinuca_mensal_expediente OWNER TO postgres;

--
-- Name: vw_rank_sinuca_mensal_fora_expediente; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_rank_sinuca_mensal_fora_expediente AS
 WITH estatistica_mensal AS (
         SELECT j.id AS jogador_id,
            j.nome,
            (date_part('month'::text, p.data_hora))::integer AS mes,
            (date_part('year'::text, p.data_hora))::integer AS ano,
            count(
                CASE
                    WHEN (((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text)) OR ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text))) THEN 1
                    ELSE NULL::integer
                END) AS vitorias,
            sum(
                CASE
                    WHEN ((p.jogadorbct IS NOT NULL) AND (((p.jogadorbct = 1) AND (j.id = p.jogador1_id)) OR ((p.jogadorbct = 2) AND (j.id = p.jogador2_id)))) THEN 1
                    ELSE 0
                END) AS merda,
            sum(
                CASE
                    WHEN (((j.id = p.jogador1_id) AND (p.vencedor = 'A'::text) AND (p.placar1 >= 4) AND (p.placar2 = 0)) OR ((j.id = p.jogador2_id) AND (p.vencedor = 'B'::text) AND (p.placar2 >= 4) AND (p.placar1 = 0))) THEN 1
                    ELSE 0
                END) AS merito
           FROM (public.jogador j
             JOIN public.vw_partida_sinuca_com_vencedor p ON (((j.id = p.jogador1_id) OR (j.id = p.jogador2_id))))
          WHERE ((p.data_hora IS NOT NULL) AND ((to_char(p.data_hora, 'HH24:MI'::text) < '12:00'::text) OR (to_char(p.data_hora, 'HH24:MI'::text) > '13:10'::text)))
          GROUP BY j.id, j.nome, (date_part('month'::text, p.data_hora)), (date_part('year'::text, p.data_hora))
        ), ranking_por_mes AS (
         SELECT em.jogador_id,
            em.nome,
            em.mes,
            em.ano,
            em.vitorias,
            em.merda,
            em.merito,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.merda DESC, em.vitorias) AS rn_merda,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.merito DESC, em.vitorias DESC) AS rn_merito,
            row_number() OVER (PARTITION BY em.ano, em.mes ORDER BY em.vitorias DESC) AS rn_vitorias
           FROM estatistica_mensal em
        ), meses_com_partidas AS (
         SELECT DISTINCT (date_part('month'::text, vw_partida_sinuca_com_vencedor.data_hora))::integer AS mes,
            (date_part('year'::text, vw_partida_sinuca_com_vencedor.data_hora))::integer AS ano
           FROM public.vw_partida_sinuca_com_vencedor
          WHERE ((to_char(vw_partida_sinuca_com_vencedor.data_hora, 'HH24:MI'::text) < '12:00'::text) OR (to_char(vw_partida_sinuca_com_vencedor.data_hora, 'HH24:MI'::text) > '13:10'::text))
        ), meses_numerados AS (
         SELECT meses_com_partidas.mes,
            meses_com_partidas.ano,
            row_number() OVER (ORDER BY meses_com_partidas.ano, meses_com_partidas.mes) AS id
           FROM meses_com_partidas
        ), top_mensal AS (
         SELECT DISTINCT mn.id,
            mn.mes,
            mn.ano,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS id_top_merda,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS nome_top_merda,
            first_value(rm.merda) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merda) AS merda,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS id_top_merito,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS nome_top_merito,
            first_value(rm.merito) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_merito) AS merito,
            first_value(rm.jogador_id) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS id_top_vitoria,
            first_value(rm.nome) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS nome_top_vitorias,
            first_value(rm.vitorias) OVER (PARTITION BY rm.ano, rm.mes ORDER BY rm.rn_vitorias) AS vitorias
           FROM (ranking_por_mes rm
             JOIN meses_numerados mn ON (((rm.mes = mn.mes) AND (rm.ano = mn.ano))))
        )
 SELECT top_mensal.id,
    top_mensal.mes,
    top_mensal.ano,
    top_mensal.id_top_merda,
    top_mensal.nome_top_merda,
    top_mensal.merda,
    top_mensal.id_top_merito,
    top_mensal.nome_top_merito,
    top_mensal.merito,
    top_mensal.id_top_vitoria,
    top_mensal.nome_top_vitorias,
    top_mensal.vitorias
   FROM top_mensal
  ORDER BY top_mensal.ano DESC, top_mensal.mes DESC;


ALTER TABLE public.vw_rank_sinuca_mensal_fora_expediente OWNER TO postgres;

--
-- Data for Name: jogador; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.jogador (id, nome) FROM stdin;
1	Marcos Batista
3	Raoni (B)
4	Wellison (Zezo)
5	Wellington
8	Miguel
9	Wagner
10	Jefter
11	Cavalcanti
12	Gomes
13	Joaquin
14	Medeiros
16	Possidio
17	Costa neto
18	Cardoso 
19	Kayo
15	Evangelista (Sub)
6	Othon (Cap)
21	Leal
22	Balbino
23	Pietro
24	Wictor
25	D Moura
26	DENIZARD 
27	Jadilson
28	Caio Silva
7	Arruda
2	Rômulo (tuty)
32	Da Silva
33	Ten Campos JR
34	Albuquerque
35	Garcia
36	Magno
37	Charles Pipico
\.


--
-- Data for Name: partida; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.partida (id, data_hora, jogador1_id, jogador2_id, jogador3_id, jogador4_id, placar1, placar2, jogadorbct, jogadas) FROM stdin;
5	2025-05-26 15:19:00	1	11	6	12	0	5	\N	\N
7	2025-05-26 15:26:00	11	5	6	12	4	1	\N	\N
107	2025-06-03 12:22:00	14	18	11	8	4	0	\N	\N
10	2025-05-26 15:33:00	13	1	3	8	1	3	\N	\N
11	2025-05-26 15:38:00	10	16	11	15	3	2	\N	\N
12	2025-05-26 15:40:00	6	12	3	8	2	3	\N	\N
108	2025-06-03 12:29:00	8	25	11	2	1	3	\N	L
13	2025-05-26 15:44:00	2	14	3	8	4	0	\N	\N
14	2025-05-26 15:50:00	16	10	1	4	0	3	\N	\N
15	2025-05-26 15:50:00	1	4	6	12	0	3	\N	\N
6	2025-05-26 18:25:00	15	11	2	14	1	3	\N	\N
17	2025-05-26 15:56:00	3	8	6	12	2	4	\N	\N
18	2025-05-26 15:59:00	10	16	2	14	2	3	\N	\N
19	2025-05-26 16:03:00	8	3	14	2	3	1	\N	\N
20	2025-05-26 16:04:00	6	15	1	4	1	3	\N	\N
109	2025-06-03 12:33:00	1	4	18	14	1	3	\N	\N
110	2025-06-03 12:35:00	13	8	11	2	0	3	\N	\N
22	2025-05-27 14:07:00	2	12	18	8	0	5	\N	\N
23	2025-05-27 14:47:00	18	8	11	19	0	3	\N	\N
24	2025-05-27 14:48:00	3	1	6	4	3	2	\N	\N
25	2025-05-27 14:49:00	12	2	11	19	4	2	\N	\N
26	2025-05-27 14:51:00	12	2	10	9	1	0	2	\N
27	2025-05-27 14:51:00	8	18	10	9	3	0	\N	\N
28	2025-05-27 14:52:00	6	4	13	15	3	2	\N	\N
29	2025-05-27 14:53:00	13	15	1	3	5	2	\N	L
30	2025-05-27 14:54:00	1	2	6	4	2	3	\N	\N
31	2025-05-27 14:54:00	19	11	8	18	0	3	\N	\N
32	2025-05-27 14:57:00	8	18	3	15	4	1	\N	\N
33	2025-05-27 14:58:00	1	2	4	6	1	3	\N	\N
9	2025-05-26 14:07:00	11	15	2	14	3	0	\N	\N
34	2025-05-27 16:20:00	3	1	2	19	5	0	\N	\N
36	2025-05-28 12:15:00	2	1	18	6	3	0	\N	\N
38	2025-05-28 12:24:00	2	1	11	8	3	1	\N	\N
39	2025-05-28 12:27:00	3	4	6	18	4	1	\N	C
40	2025-05-28 12:29:00	8	13	2	1	0	3	\N	\N
41	2025-05-28 12:38:00	2	1	6	15	3	1	\N	\N
42	2025-05-28 12:38:00	18	11	3	4	3	1	\N	\N
43	2025-05-28 12:42:00	10	13	2	1	4	0	\N	L
44	2025-05-28 12:43:00	4	3	18	11	1	3	\N	\N
45	2025-05-28 12:45:00	10	13	15	3	0	4	\N	C
46	2025-05-28 12:45:00	18	11	6	8	3	0	\N	\N
47	2025-05-28 12:53:00	18	11	10	2	0	4	\N	\N
48	2025-05-28 12:53:00	4	1	15	3	0	3	\N	\N
49	2025-05-28 12:57:00	15	3	11	18	1	1	4	\N
50	2025-05-28 13:01:00	10	2	6	8	3	1	\N	\N
51	2025-05-29 12:19:00	1	2	11	8	3	0	\N	\N
53	2025-05-29 12:25:00	1	2	8	11	1	4	\N	L
55	2025-05-29 12:26:00	4	5	1	2	3	0	\N	L
56	2025-05-29 12:30:00	8	11	10	13	3	0	\N	\N
57	2025-05-29 12:32:00	5	4	15	14	0	4	\N	C
58	2025-05-29 12:34:00	1	3	8	11	0	4	\N	C
59	2025-05-29 12:42:00	10	2	15	14	3	2	\N	\N
60	2025-05-29 12:43:00	13	4	8	11	3	2	\N	\N
62	2025-05-29 12:47:00	13	4	15	3	0	3	\N	L
63	2025-05-29 12:48:00	10	2	1	5	3	0	\N	\N
64	2025-05-29 12:55:00	10	2	4	13	3	2	\N	\N
66	2025-05-29 12:58:00	8	11	15	3	4	2	\N	\N
67	2025-05-29 13:02:00	1	5	10	2	3	2	\N	\N
65	2025-05-29 12:57:00	3	15	11	8	2	4	\N	L
61	2025-05-29 12:46:00	13	4	3	15	0	3	\N	L
85	2025-06-02 12:15:00	14	15	18	8	3	2	\N	\N
86	2025-06-02 12:22:00	14	15	2	11	0	4	\N	\N
88	2025-06-02 12:26:00	4	3	8	18	2	3	\N	\N
90	2025-06-02 12:29:00	14	13	2	11	2	3	\N	\N
91	2025-06-02 12:32:00	1	15	8	18	1	5	\N	L
93	2025-06-02 12:38:00	2	11	3	4	1	3	\N	\N
94	2025-06-02 12:43:00	10	13	8	18	2	3	\N	\N
95	2025-06-02 12:45:00	14	16	3	4	5	0	\N	L
98	2025-06-02 12:52:00	14	16	6	11	2	3	\N	\N
99	2025-06-02 12:54:00	6	11	2	10	0	4	\N	C
100	2025-06-02 12:54:00	1	15	8	18	2	3	\N	\N
102	2025-06-02 13:00:00	2	10	3	25	3	0	\N	\N
103	2025-06-02 13:01:00	8	18	4	16	5	0	\N	L
105	2025-06-03 12:15:00	14	18	2	1	4	0	\N	L
114	2025-06-03 12:37:00	11	2	1	10	0	4	\N	C
116	2025-06-03 12:45:00	4	15	14	18	4	2	\N	L
117	2025-06-03 12:48:00	13	8	1	10	5	2	\N	L
118	2025-06-03 12:50:00	18	2	8	13	3	0	\N	L
120	2025-06-03 12:54:00	15	4	11	6	2	1	4	\N
122	2025-06-03 12:55:00	10	14	18	2	2	4	\N	L
123	2025-06-03 13:00:00	18	2	11	8	2	4	\N	C
124	2025-06-03 13:05:00	4	15	1	13	3	2	\N	L
128	2025-06-04 12:18:00	2	15	18	14	3	1	\N	\N
130	2025-06-04 12:24:00	8	3	4	11	0	5	\N	L
131	2025-06-04 12:27:00	14	18	2	15	2	3	\N	\N
132	2025-06-04 12:27:00	9	1	4	11	0	3	\N	\N
135	2025-06-04 12:34:00	2	15	8	10	0	3	\N	\N
136	2025-06-04 12:39:00	8	10	1	14	1	3	\N	L
137	2025-06-04 12:41:00	4	11	18	3	3	2	\N	\N
138	2025-06-04 12:42:00	9	2	1	14	0	5	\N	C
140	2025-06-04 12:47:00	8	10	4	11	0	3	\N	\N
141	2025-06-04 12:49:00	1	14	3	18	3	0	\N	\N
142	2025-06-04 12:55:00	6	2	8	10	2	5	\N	C
144	2025-06-04 12:59:00	15	9	1	14	1	3	\N	\N
146	2025-06-04 13:03:00	11	4	8	10	3	2	\N	\N
148	2025-06-04 13:08:00	1	3	15	2	2	3	\N	L
158	2025-06-05 12:25:00	15	11	1	2	1	3	\N	\N
159	2025-06-05 12:27:00	1	2	13	14	3	0	\N	L
160	2025-06-05 12:35:00	4	8	3	9	3	2	\N	\N
161	2025-06-05 12:38:00	1	2	15	11	3	2	\N	\N
163	2025-06-05 12:42:00	14	18	4	8	3	0	\N	\N
166	2025-06-05 12:43:00	10	6	1	2	4	0	\N	L
167	2025-06-05 12:46:00	10	6	11	9	3	0	\N	\N
169	2025-06-05 12:49:00	13	3	18	14	2	3	\N	\N
171	2025-06-05 12:52:00	8	4	6	10	0	3	\N	\N
172	2025-06-05 12:55:00	2	1	18	14	3	0	\N	\N
174	2025-06-05 12:58:00	10	6	9	11	3	0	\N	\N
175	2025-06-05 13:01:00	10	6	11	4	3	0	\N	\N
176	2025-06-05 13:02:00	15	3	1	2	0	3	\N	\N
178	2025-06-05 13:22:00	8	4	9	11	3	0	\N	L
183	2025-06-06 10:53:00	11	4	1	3	1	3	\N	\N
184	2025-06-09 12:20:00	1	15	18	14	3	0	\N	\N
185	2025-06-09 12:26:00	1	15	8	3	0	3	\N	\N
186	2025-06-09 12:31:00	8	3	10	13	4	0	\N	L
187	2025-06-09 12:36:00	1	15	18	14	3	0	\N	\N
188	2025-06-09 12:42:00	8	3	10	13	3	2	\N	\N
189	2025-06-09 12:44:00	8	3	10	13	3	0	\N	L
190	2025-06-09 12:46:00	8	3	10	13	0	3	\N	L
191	2025-06-09 12:46:00	1	15	18	14	1	6	\N	C
192	2025-06-09 12:53:00	15	1	10	13	0	3	\N	\N
193	2025-06-09 12:59:00	18	14	8	3	1	3	\N	\N
194	2025-06-09 13:00:00	10	13	15	1	4	1	\N	\N
195	2025-06-09 13:01:00	8	3	14	18	0	3	\N	\N
198	2025-06-10 12:25:00	6	2	10	8	3	0	\N	\N
200	2025-06-10 12:30:00	6	2	3	10	0	5	\N	L
202	2025-06-10 12:35:00	16	8	13	15	3	0	\N	\N
203	2025-06-10 12:37:00	3	10	2	1	3	0	\N	\N
205	2025-06-10 12:41:00	3	10	1	15	0	1	4	\N
207	2025-06-10 12:43:00	16	8	6	13	1	3	\N	\N
209	2025-06-10 12:52:00	2	4	1	15	3	1	\N	\N
211	2025-06-10 12:55:00	10	3	6	13	3	2	\N	\N
213	2025-06-10 12:59:00	8	16	2	4	3	0	\N	\N
206	2025-06-10 12:43:00	4	2	3	10	5	0	\N	C
214	2025-06-10 13:02:00	1	15	10	3	3	0	\N	\N
215	2025-06-10 13:03:00	4	16	6	13	3	0	\N	\N
222	2025-06-11 12:15:00	18	14	1	2	0	3	\N	\N
223	2025-06-11 12:23:00	1	2	4	8	3	1	\N	\N
226	2025-06-11 12:30:00	1	2	18	3	3	0	4	\N
227	2025-06-11 12:31:00	14	13	1	2	0	3	\N	L
228	2025-06-11 12:35:00	6	10	8	4	4	1	\N	\N
229	2025-06-11 12:38:00	18	14	6	10	3	0	\N	L
232	2025-06-11 12:39:00	18	14	13	4	3	0	\N	L
234	2025-06-11 12:44:00	1	2	3	15	2	3	\N	\N
235	2025-06-11 12:46:00	6	8	18	14	0	3	\N	\N
236	2025-06-11 12:48:00	3	15	10	13	3	0	\N	\N
238	2025-06-11 12:51:00	18	14	1	4	0	3	\N	\N
240	2025-06-11 12:59:00	1	4	13	8	3	1	\N	\N
241	2025-06-11 13:01:00	3	15	6	2	3	2	\N	\N
254	2025-06-12 12:20:00	2	12	15	18	3	1	\N	\N
255	2025-06-12 12:24:00	8	14	4	27	3	1	\N	\N
258	2025-06-12 12:27:00	2	12	3	18	3	0	\N	\N
259	2025-06-12 12:28:00	2	12	18	3	3	0	\N	\N
261	2025-06-12 12:31:00	2	12	10	13	2	0	3	\N
262	2025-06-12 12:36:00	6	26	8	14	3	2	\N	\N
263	2025-06-12 12:40:00	2	12	1	15	2	3	\N	\N
264	2025-06-12 12:40:00	6	26	27	4	0	3	\N	\N
266	2025-06-12 12:45:00	10	13	4	27	2	0	4	\N
269	2025-06-12 12:50:00	10	13	8	14	0	4	\N	\N
270	2025-06-12 12:51:00	18	3	1	15	1	3	\N	\N
272	2025-06-12 12:56:00	6	10	8	14	3	0	\N	\N
273	2025-06-12 12:59:00	1	15	2	12	3	1	\N	\N
274	2025-06-12 12:59:00	6	10	4	18	0	3	\N	L
285	2025-06-16 12:17:00	14	2	6	18	1	3	\N	\N
286	2025-06-16 12:25:00	1	8	4	12	3	1	\N	\N
287	2025-06-16 12:28:00	6	18	3	15	2	4	4	\N
288	2025-06-16 12:30:00	10	13	1	8	3	0	\N	\N
291	2025-06-16 12:38:00	18	6	4	2	2	3	\N	\N
293	2025-06-16 12:41:00	15	3	10	13	3	2	\N	\N
295	2025-06-16 12:41:00	15	3	10	13	4	2	\N	\N
296	2025-06-16 12:45:00	1	8	2	4	0	3	\N	\N
298	2025-06-16 12:57:00	15	3	18	6	3	2	\N	\N
299	2025-06-16 12:57:00	10	13	4	2	3	2	\N	\N
300	2025-06-16 12:58:00	10	13	2	8	0	4	\N	L
318	2025-06-18 12:11:00	28	18	6	12	3	0	\N	\N
321	2025-06-18 12:22:00	12	6	18	15	3	1	\N	\N
322	2025-06-18 12:25:00	12	6	2	8	3	0	\N	L
324	2025-06-18 12:36:00	8	2	4	15	1	3	\N	\N
326	2025-06-18 12:40:00	1	8	12	6	0	0	1	\N
328	2025-06-18 12:42:00	18	8	6	12	3	0	\N	L
329	2025-06-18 12:46:00	4	15	10	2	3	1	\N	\N
330	2025-06-18 12:47:00	8	18	6	1	1	3	\N	L
331	2025-06-18 12:52:00	10	2	4	15	3	0	\N	\N
333	2025-06-18 12:55:00	8	18	6	1	4	1	\N	\N
338	2025-06-18 13:05:00	1	6	8	18	3	1	\N	\N
336	2025-06-18 13:00:00	10	2	4	15	3	0	\N	L
334	2025-06-18 12:58:00	10	2	4	15	3	1	\N	\N
344	2025-06-23 12:21:00	11	15	1	4	5	0	\N	C
347	2025-06-23 12:24:00	11	15	1	4	0	0	4	\N
352	2025-06-23 12:33:00	8	18	15	2	3	0	\N	\N
353	2025-06-23 12:38:00	1	4	11	5	1	4	\N	L
354	2025-06-23 12:38:00	8	18	2	15	3	0	\N	\N
356	2025-06-23 12:44:00	8	18	15	2	5	1	\N	C
357	2025-06-23 12:49:00	11	5	1	4	3	1	\N	\N
359	2025-06-23 12:51:00	8	18	2	15	5	0	\N	L
361	2025-06-23 12:55:00	8	18	15	2	4	1	\N	L
362	2025-06-23 13:00:00	4	1	11	5	3	2	\N	\N
367	2025-06-23 13:23:00	2	15	8	18	0	3	\N	\N
372	2025-06-25 12:11:00	6	18	2	11	0	3	\N	L
373	2025-06-25 12:11:00	11	2	8	1	0	0	2	\N
375	2025-06-25 12:16:00	6	18	1	8	3	1	\N	L
377	2025-06-25 12:20:00	6	18	4	11	0	4	\N	C
378	2025-06-25 12:21:00	1	8	2	14	0	3	\N	\N
381	2025-06-25 12:30:00	4	11	6	3	3	1	\N	\N
382	2025-06-25 12:31:00	8	18	2	14	3	2	\N	\N
348	2025-06-23 12:27:00	8	18	12	2	3	0	\N	\N
384	2025-06-25 12:35:00	4	11	15	10	0	3	\N	\N
385	2025-06-25 12:36:00	3	1	8	18	3	1	\N	L
387	2025-06-25 12:40:00	2	14	15	10	0	3	\N	\N
388	2025-06-25 12:47:00	3	1	6	11	2	3	\N	\N
390	2025-06-25 12:50:00	4	18	15	10	3	1	\N	\N
391	2025-06-25 12:57:00	8	2	6	11	1	3	\N	\N
393	2025-06-25 12:58:00	3	14	4	18	3	1	\N	\N
394	2025-06-25 13:01:00	6	11	10	1	3	0	\N	\N
400	2025-06-26 08:08:00	1	8	10	11	3	1	\N	\N
401	2025-06-26 08:14:00	1	8	11	10	0	3	\N	\N
403	2025-06-26 08:19:00	11	10	1	8	0	3	\N	\N
404	2025-06-26 08:21:00	1	8	15	18	4	0	\N	C
405	2025-06-26 08:31:00	1	8	11	10	3	1	\N	\N
406	2025-06-26 08:40:00	1	8	18	15	3	2	\N	\N
407	2025-06-26 08:44:00	1	8	11	10	0	5	\N	L
408	2025-06-26 08:49:00	11	10	15	18	0	3	\N	\N
409	2025-06-26 08:59:00	15	18	8	1	1	3	\N	\N
410	2025-06-26 09:06:00	8	1	11	10	3	1	\N	\N
411	2025-06-26 09:15:00	8	1	15	18	3	1	\N	\N
417	2025-06-26 12:25:00	11	2	3	14	2	3	\N	\N
419	2025-06-26 12:27:00	8	18	6	4	1	3	\N	\N
420	2025-06-26 12:30:00	5	15	3	14	0	1	1	\N
422	2025-06-26 12:33:00	1	10	6	4	1	3	\N	\N
423	2025-06-26 12:33:00	3	14	2	11	0	4	\N	C
425	2025-06-26 12:39:00	8	18	2	11	0	3	\N	\N
427	2025-06-26 12:46:00	2	11	27	1	2	4	\N	C
428	2025-06-26 12:49:00	6	4	15	3	3	2	\N	\N
429	2025-06-26 12:51:00	10	14	27	1	1	3	\N	\N
430	2025-06-26 12:56:00	27	1	2	11	0	3	\N	\N
431	2025-06-26 12:58:00	8	18	4	6	1	3	\N	\N
463	2025-06-30 12:14:00	8	32	6	18	0	3	\N	\N
465	2025-06-30 12:14:00	6	18	8	32	3	2	\N	\N
466	2025-06-30 12:14:00	6	18	8	32	3	2	\N	\N
468	2025-06-30 12:20:00	6	18	14	11	3	2	\N	\N
469	2025-06-30 12:22:00	4	32	8	3	0	3	\N	\N
470	2025-06-30 12:22:00	6	18	1	11	0	0	4	\N
472	2025-06-30 12:24:00	10	14	8	3	0	3	\N	L
474	2025-06-30 12:32:00	4	32	6	18	3	1	\N	\N
476	2025-06-30 12:35:00	8	3	1	11	3	2	\N	\N
477	2025-06-30 12:36:00	11	1	8	3	2	3	\N	\N
478	2025-06-30 12:37:00	14	10	32	4	0	3	\N	\N
479	2025-06-30 12:39:00	32	4	1	11	0	3	\N	L
481	2025-06-30 12:43:00	1	11	14	10	1	1	3	\N
482	2025-06-30 12:45:00	4	32	1	11	3	0	\N	L
484	2025-06-30 12:48:00	6	18	8	3	3	1	\N	\N
485	2025-06-30 12:48:00	6	18	8	3	3	1	\N	\N
486	2025-06-30 12:55:00	11	1	6	18	1	4	\N	L
488	2025-06-30 13:02:00	4	32	1	11	3	0	\N	\N
487	2025-06-30 12:56:00	4	32	3	8	3	0	\N	L
489	2025-06-30 13:04:00	6	18	10	14	3	2	\N	\N
494	2025-07-01 07:51:00	6	11	1	3	3	0	\N	\N
495	2025-07-01 08:00:00	6	11	3	1	3	1	\N	\N
496	2025-07-01 08:10:00	6	11	1	3	0	1	1	\N
497	2025-07-01 08:18:00	1	3	6	10	0	3	\N	\N
499	2025-07-01 08:31:00	6	10	11	3	3	2	\N	\N
501	2025-07-01 08:41:00	11	1	6	10	2	3	\N	\N
504	2025-07-01 08:49:00	6	10	8	3	1	3	\N	\N
508	2025-07-01 09:05:00	6	11	8	3	3	2	\N	\N
509	2025-07-01 09:05:00	6	11	1	10	3	0	\N	L
512	2025-07-01 12:15:00	6	18	8	14	0	3	\N	\N
513	2025-07-01 12:16:00	4	1	6	18	3	0	\N	L
515	2025-07-01 12:21:00	11	12	18	6	0	4	\N	C
519	2025-07-01 12:29:00	4	1	18	6	1	4	\N	C
518	2025-07-01 12:28:00	32	27	4	1	1	3	\N	\N
514	2025-07-01 12:20:00	11	12	8	14	2	0	4	\N
522	2025-07-01 12:42:00	10	27	14	8	0	3	\N	\N
524	2025-07-01 12:48:00	8	14	6	32	3	0	\N	\N
526	2025-07-01 12:53:00	10	27	1	4	4	2	\N	L
527	2025-07-01 12:53:00	8	14	32	11	4	1	\N	\N
529	2025-07-01 12:56:00	1	32	10	27	0	1	1	\N
530	2025-07-01 12:58:00	6	11	8	14	3	1	\N	\N
531	2025-07-01 12:59:00	1	4	10	27	0	4	\N	C
413	2025-06-26 12:12:00	12	14	6	18	3	2	\N	\N
523	2025-07-01 12:46:00	12	11	1	4	2	3	\N	\N
343	2025-06-23 12:20:00	8	18	12	2	3	2	\N	\N
520	2025-07-01 12:35:00	32	27	12	11	0	6	\N	C
414	2025-06-26 12:17:00	11	2	14	12	5	0	\N	L
544	2025-07-02 12:13:00	11	14	18	6	4	0	\N	L
547	2025-07-02 12:19:00	11	14	8	4	0	3	\N	\N
549	2025-07-02 12:21:00	8	4	18	1	0	3	\N	L
551	2025-07-02 12:26:00	11	14	8	4	1	3	\N	L
552	2025-07-02 12:28:00	1	18	10	6	4	0	\N	\N
553	2025-07-02 12:28:00	8	4	11	14	0	0	2	\N
555	2025-07-02 12:36:00	10	6	1	18	1	3	\N	\N
557	2025-07-02 12:39:00	8	4	11	14	2	3	\N	\N
560	2025-07-02 12:43:00	6	10	1	18	3	0	\N	\N
563	2025-07-02 12:53:00	11	14	8	4	2	3	\N	\N
564	2025-07-02 12:53:00	6	10	1	18	2	3	\N	\N
566	2025-07-02 13:00:00	11	14	8	4	1	3	\N	\N
587	2025-07-03 12:20:00	6	18	1	5	3	0	\N	L
588	2025-07-03 12:25:00	1	14	6	18	3	1	\N	\N
589	2025-07-03 12:31:00	1	14	7	18	1	4	\N	L
590	2025-07-03 12:35:00	7	18	1	6	4	1	\N	C
591	2025-07-03 12:35:00	10	5	14	8	0	3	\N	\N
592	2025-07-03 12:39:00	14	8	6	1	0	3	\N	\N
593	2025-07-03 12:39:00	18	7	23	10	0	1	1	\N
594	2025-07-03 12:40:00	8	4	10	5	2	3	\N	\N
595	2025-07-03 12:43:00	6	1	18	14	1	4	\N	C
596	2025-07-03 12:45:00	7	5	10	23	0	3	\N	\N
597	2025-07-03 12:51:00	10	23	1	5	3	0	\N	\N
598	2025-07-03 12:57:00	14	18	8	6	2	1	\N	\N
599	2025-07-03 13:03:00	10	23	1	7	2	4	\N	\N
622	2025-07-07 12:14:00	1	12	6	18	0	3	\N	\N
624	2025-07-07 12:21:00	6	18	4	11	5	0	\N	L
627	2025-07-07 12:29:00	1	4	10	11	4	0	\N	L
628	2025-07-07 12:30:00	18	6	8	12	3	1	\N	\N
630	2025-07-07 12:32:00	1	4	10	11	4	0	\N	L
631	2025-07-07 12:39:00	18	6	12	8	3	1	\N	\N
632	2025-07-07 12:39:00	1	4	11	10	0	3	\N	\N
634	2025-07-07 12:44:00	1	4	10	11	0	3	\N	\N
636	2025-07-07 12:46:00	6	18	8	12	1	3	\N	\N
638	2025-07-07 12:49:00	6	18	8	12	0	0	4	\N
640	2025-07-07 12:55:00	1	4	11	10	3	2	\N	\N
643	2025-07-07 13:05:00	6	11	4	1	3	2	\N	\N
653	2025-07-08 12:26:00	6	11	8	4	1	3	\N	\N
655	2025-07-08 12:31:00	8	4	1	13	4	1	\N	L
657	2025-07-08 12:36:00	10	14	6	11	1	3	\N	\N
659	2025-07-08 12:43:00	6	11	10	14	3	0	\N	\N
662	2025-07-08 12:49:00	6	11	13	1	0	3	\N	\N
664	2025-07-08 12:55:00	13	1	10	8	0	3	\N	\N
666	2025-07-08 13:04:00	10	8	6	11	1	3	\N	\N
673	2025-07-09 12:16:00	6	11	18	1	0	5	\N	C
675	2025-07-09 12:23:00	18	1	10	8	0	3	\N	\N
676	2025-07-09 12:32:00	10	8	11	6	2	3	\N	\N
678	2025-07-09 12:33:00	11	6	13	1	3	0	\N	L
679	2025-07-09 12:34:00	11	6	13	1	3	0	\N	L
681	2025-07-09 12:36:00	11	6	18	8	3	0	\N	L
685	2025-07-09 12:51:00	11	6	1	8	3	2	\N	L
688	2025-07-09 12:59:00	11	6	18	13	1	3	\N	\N
690	2025-07-09 13:04:00	1	13	10	6	0	3	\N	\N
700	2025-07-10 12:27:00	6	18	4	13	3	0	\N	L
701	2025-07-10 12:28:00	6	18	4	13	1	1	2	\N
704	2025-07-10 12:33:00	13	4	6	18	3	0	\N	\N
707	2025-07-10 12:52:00	13	6	1	18	2	3	\N	\N
747	2025-07-14 12:19:00	2	4	11	18	2	3	\N	\N
749	2025-07-14 12:26:00	11	18	8	14	1	2	2	\N
752	2025-07-14 12:32:00	15	18	8	14	3	0	\N	L
753	2025-07-14 12:32:00	4	2	8	14	5	1	\N	C
755	2025-07-14 12:43:00	1	11	15	18	1	3	\N	\N
757	2025-07-14 12:44:00	8	13	4	2	4	2	\N	\N
758	2025-07-14 12:46:00	14	10	15	18	0	4	\N	C
759	2025-07-14 12:49:00	15	18	2	5	3	0	\N	L
760	2025-07-14 12:49:00	8	13	11	1	1	5	\N	C
762	2025-07-14 12:56:00	4	2	11	1	0	3	\N	\N
763	2025-07-14 12:57:00	18	15	10	14	1	3	\N	\N
764	2025-07-14 12:57:00	10	14	18	15	3	1	\N	\N
766	2025-07-14 13:01:00	11	1	13	8	3	0	\N	\N
768	2025-07-14 13:08:00	15	13	1	11	1	3	\N	\N
774	2025-07-15 12:18:00	1	8	2	7	3	0	\N	L
775	2025-07-15 12:26:00	1	8	11	18	2	5	\N	C
776	2025-07-15 12:45:00	15	4	25	7	4	0	\N	\N
777	2025-07-15 12:48:00	15	4	1	2	0	4	\N	\N
778	2025-07-15 12:54:00	15	4	11	18	3	2	\N	\N
779	2025-07-15 12:57:00	1	2	8	18	1	3	\N	\N
780	2025-07-15 13:02:00	25	11	8	18	0	3	\N	\N
786	2025-07-16 12:23:00	34	4	1	35	3	0	\N	L
788	2025-07-16 12:24:00	34	4	1	35	3	0	\N	\N
792	2025-07-16 12:37:00	34	4	35	1	1	4	\N	C
794	2025-07-16 12:45:00	35	1	25	4	3	0	\N	\N
789	2025-07-16 12:25:00	1	35	34	4	3	0	\N	L
815	2025-07-21 12:15:00	2	1	6	11	0	3	\N	\N
817	2025-07-21 12:19:00	6	11	2	4	0	3	\N	\N
818	2025-07-21 12:28:00	2	4	6	11	2	3	\N	\N
822	2025-07-21 12:41:00	6	11	10	15	3	2	\N	\N
824	2025-07-21 12:47:00	6	11	15	10	3	2	\N	\N
825	2025-07-21 12:48:00	6	11	2	4	3	0	\N	L
828	2025-07-21 13:01:00	6	11	10	15	4	2	\N	L
829	2025-07-21 13:01:00	6	11	10	15	3	2	\N	L
832	2025-07-21 13:07:00	6	11	1	10	3	1	\N	\N
842	2025-07-22 12:21:00	6	11	18	2	3	2	\N	\N
844	2025-07-22 12:32:00	6	11	4	1	5	1	\N	C
846	2025-07-22 12:37:00	6	11	10	2	3	1	\N	\N
847	2025-07-22 12:42:00	6	11	2	16	4	1	\N	L
848	2025-07-22 12:42:00	15	18	1	4	3	0	\N	\N
850	2025-07-22 12:49:00	6	11	16	1	3	1	\N	\N
851	2025-07-22 12:51:00	6	11	1	2	3	0	\N	L
852	2025-07-22 12:52:00	1	2	6	11	0	3	\N	L
854	2025-07-22 12:54:00	4	10	18	15	3	2	\N	\N
855	2025-07-22 12:59:00	16	2	6	11	5	1	\N	L
856	2025-07-22 13:00:00	16	2	15	11	0	4	\N	C
857	2025-07-22 13:01:00	4	10	1	7	3	0	\N	\N
860	2025-07-22 13:07:00	7	10	1	16	3	0	\N	\N
871	2025-07-23 12:17:00	18	6	11	2	3	0	\N	\N
872	2025-07-23 12:18:00	18	6	1	4	0	3	\N	\N
874	2025-07-23 12:23:00	1	4	2	11	0	3	\N	\N
877	2025-07-23 12:29:00	2	11	6	18	3	1	\N	\N
881	2025-07-23 12:41:00	2	11	4	15	2	3	\N	\N
882	2025-07-23 12:46:00	4	15	18	6	4	0	\N	L
884	2025-07-23 12:51:00	4	15	1	2	1	4	\N	C
886	2025-07-23 12:58:00	1	2	11	18	5	1	\N	L
889	2025-07-23 13:02:00	1	2	6	4	1	3	\N	\N
890	2025-07-23 13:12:00	6	1	15	11	2	3	\N	\N
894	2025-07-24 07:44:00	37	1	11	10	3	0	\N	\N
895	2025-07-24 07:44:00	37	1	11	10	3	0	\N	\N
896	2025-07-24 07:53:00	37	1	6	11	3	1	\N	\N
897	2025-07-24 08:01:00	37	1	10	2	1	3	\N	\N
898	2025-07-24 08:06:00	11	6	2	10	0	3	\N	\N
899	2025-07-24 08:08:00	15	37	10	2	0	3	\N	L
900	2025-07-24 08:11:00	6	11	2	10	3	0	\N	L
906	2025-07-24 08:25:00	37	15	10	2	3	0	\N	L
908	2025-07-24 08:35:00	37	15	2	11	3	2	\N	\N
910	2025-07-24 08:42:00	37	15	1	10	1	2	2	\N
912	2025-07-24 08:46:00	1	10	2	11	4	2	\N	C;L
914	2025-07-24 08:53:00	1	10	15	37	0	3	\N	\N
916	2025-07-24 09:02:00	15	37	2	11	1	3	\N	\N
917	2025-07-24 09:09:00	2	11	10	1	2	3	\N	\N
918	2025-07-24 09:18:00	15	37	1	10	2	5	\N	C
919	2025-07-24 09:22:00	11	10	23	15	3	0	\N	L
\.


--
-- Data for Name: partida_sinuca; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.partida_sinuca (id, data_hora, jogador1_id, jogador2_id, placar1, placar2, jogadorbct) FROM stdin;
71	2025-06-01 21:22:00	1	21	0	0	2
72	2025-06-01 21:23:00	1	21	1	0	2
73	2025-06-01 21:24:00	1	21	3	4	\N
75	2025-06-01 21:24:00	21	1	4	1	\N
76	2025-06-01 21:24:00	1	21	4	3	\N
77	2025-06-01 21:24:00	1	21	4	3	\N
78	2025-06-01 21:25:00	1	21	4	2	\N
79	2025-06-01 21:25:00	1	21	4	1	\N
80	2025-06-01 21:25:00	1	21	4	0	\N
81	2025-06-01 21:25:00	1	21	4	3	\N
74	2025-06-01 21:24:00	21	1	4	2	2
82	2025-06-02 08:48:00	1	7	4	2	\N
83	2025-06-02 08:55:00	1	7	4	2	\N
84	2025-06-02 12:15:00	21	11	2	3	2
87	2025-06-02 12:23:00	21	1	4	3	\N
89	2025-06-02 12:28:00	24	21	4	2	\N
92	2025-06-02 12:35:00	24	7	0	4	\N
96	2025-06-02 12:51:00	25	7	3	4	\N
97	2025-06-02 12:52:00	7	22	2	4	\N
101	2025-06-02 12:57:00	22	23	4	3	\N
104	2025-06-02 13:03:00	22	21	4	1	\N
106	2025-06-03 12:20:00	21	2	4	1	\N
111	2025-06-03 12:35:00	21	22	1	4	\N
112	2025-06-03 12:36:00	22	7	1	4	\N
113	2025-06-03 12:36:00	23	22	2	4	\N
115	2025-06-03 12:42:00	25	7	4	2	\N
119	2025-06-03 12:51:00	25	21	2	4	1
125	2025-06-03 13:06:00	21	23	4	3	\N
126	2025-06-04 12:11:00	1	11	4	3	\N
127	2025-06-04 12:16:00	1	21	3	4	\N
129	2025-06-04 12:22:00	21	22	1	1	1
133	2025-06-04 12:29:00	7	22	4	3	\N
134	2025-06-04 12:31:00	7	23	4	0	\N
139	2025-06-04 12:44:00	7	25	4	3	\N
143	2025-06-04 12:56:00	7	21	3	4	\N
145	2025-06-04 12:59:00	21	22	4	2	\N
147	2025-06-04 13:08:00	21	23	3	4	\N
149	2025-06-04 13:10:00	23	25	4	1	\N
150	2025-06-05 08:27:00	23	1	2	4	\N
151	2025-06-05 08:30:00	1	23	3	1	1
152	2025-06-05 08:33:00	23	1	1	0	2
153	2025-06-05 08:41:00	23	1	3	3	1
154	2025-06-05 08:45:00	1	23	2	4	\N
155	2025-06-05 08:50:00	23	1	2	4	\N
156	2025-06-05 08:54:00	1	23	3	1	1
157	2025-06-05 09:00:00	1	23	3	1	2
162	2025-06-05 12:41:00	7	21	4	1	\N
164	2025-06-05 12:42:00	14	21	3	4	\N
165	2025-06-05 12:42:00	25	7	1	4	\N
168	2025-06-05 12:47:00	7	23	3	4	\N
170	2025-06-05 12:52:00	23	22	1	2	1
173	2025-06-05 12:58:00	21	22	2	4	\N
177	2025-06-05 13:02:00	22	25	3	4	1
179	2025-06-05 16:26:00	21	1	4	2	\N
180	2025-06-05 16:34:00	21	15	4	3	\N
181	2025-06-06 07:50:00	21	1	2	4	\N
182	2025-06-06 09:13:00	23	21	2	4	\N
196	2025-06-10 12:16:00	21	1	3	3	1
197	2025-06-10 12:22:00	23	1	3	4	\N
199	2025-06-10 12:26:00	1	22	4	2	\N
201	2025-06-10 12:30:00	1	21	0	1	1
204	2025-06-10 12:38:00	21	23	2	4	\N
208	2025-06-10 12:49:00	23	22	3	4	\N
210	2025-06-10 12:54:00	22	21	3	4	\N
212	2025-06-10 12:59:00	21	23	2	4	\N
216	2025-06-10 13:06:00	23	22	4	3	\N
217	2025-06-10 16:26:00	1	21	2	1	2
218	2025-06-10 16:32:00	1	21	4	2	\N
219	2025-06-11 07:43:00	1	21	3	4	\N
220	2025-06-11 07:44:00	21	15	0	0	1
221	2025-06-11 07:49:00	15	21	0	4	\N
224	2025-06-11 12:26:00	21	23	1	4	\N
225	2025-06-11 12:27:00	23	22	3	0	1
230	2025-06-11 12:39:00	21	22	4	2	\N
231	2025-06-11 12:39:00	21	23	3	4	\N
233	2025-06-11 12:43:00	23	22	2	4	\N
237	2025-06-11 12:51:00	22	21	4	0	\N
239	2025-06-11 12:51:00	22	23	4	1	\N
242	2025-06-11 13:04:00	22	23	3	4	\N
243	2025-06-11 16:27:00	1	21	2	1	2
244	2025-06-11 16:28:00	1	2	0	0	2
245	2025-06-11 16:35:00	21	1	4	3	\N
246	2025-06-12 08:37:00	21	23	3	4	\N
247	2025-06-12 08:41:00	23	21	4	3	\N
248	2025-06-12 08:50:00	23	21	3	4	\N
249	2025-06-12 08:51:00	21	23	0	0	1
250	2025-06-12 08:56:00	23	21	2	4	\N
251	2025-06-12 09:03:00	21	23	1	4	\N
252	2025-06-12 09:08:00	23	21	2	0	1
253	2025-06-12 09:18:00	23	21	4	3	\N
257	2025-06-12 12:25:00	1	21	4	3	\N
260	2025-06-12 12:30:00	23	22	0	4	\N
256	2025-06-12 12:25:00	1	22	2	4	\N
265	2025-06-12 12:41:00	22	21	4	2	\N
267	2025-06-12 12:50:00	22	23	0	1	1
268	2025-06-12 12:50:00	23	21	4	3	\N
271	2025-06-12 12:54:00	23	22	0	1	1
275	2025-06-12 16:25:00	1	21	2	2	2
276	2025-06-12 16:29:00	1	21	4	2	\N
277	2025-06-12 16:33:00	1	21	4	3	\N
278	2025-06-13 12:09:00	1	23	4	2	\N
279	2025-06-13 12:12:00	1	23	4	1	\N
280	2025-06-13 12:21:00	1	23	3	2	2
281	2025-06-13 12:27:00	1	23	2	4	\N
282	2025-06-13 12:32:00	23	1	3	4	\N
283	2025-06-13 12:38:00	1	23	3	4	\N
284	2025-06-13 12:43:00	23	1	0	1	2
289	2025-06-16 12:31:00	21	22	2	4	\N
290	2025-06-16 12:31:00	22	23	4	3	\N
292	2025-06-16 12:40:00	22	23	4	0	\N
294	2025-06-16 12:41:00	22	21	2	1	2
297	2025-06-16 12:50:00	22	1	3	4	\N
301	2025-06-16 12:59:00	1	23	3	4	\N
302	2025-06-16 13:07:00	23	21	1	1	1
303	2025-06-17 12:10:00	21	18	4	3	\N
304	2025-06-17 12:13:00	21	23	0	0	2
305	2025-06-17 12:21:00	18	21	2	4	\N
306	2025-06-17 12:28:00	21	3	2	4	\N
307	2025-06-17 12:37:00	3	6	3	4	\N
308	2025-06-17 12:45:00	6	23	0	4	\N
309	2025-06-17 12:45:00	3	6	0	2	1
310	2025-06-17 12:51:00	21	23	3	4	\N
311	2025-06-17 13:01:00	23	18	3	3	2
312	2025-06-17 13:08:00	21	23	2	4	\N
313	2025-06-17 13:16:00	23	21	3	3	2
314	2025-06-17 13:21:00	21	23	3	4	\N
315	2025-06-17 13:29:00	23	15	3	4	\N
316	2025-06-17 13:36:00	15	21	2	4	\N
317	2025-06-17 13:43:00	21	23	3	3	1
319	2025-06-18 12:21:00	2	21	2	4	\N
320	2025-06-18 12:21:00	21	2	1	1	1
323	2025-06-18 12:29:00	22	21	3	4	\N
325	2025-06-18 12:36:00	21	23	2	4	\N
327	2025-06-18 12:42:00	23	22	4	2	\N
332	2025-06-18 12:54:00	23	21	4	3	\N
335	2025-06-18 12:59:00	23	22	1	4	\N
337	2025-06-18 13:03:00	22	21	2	2	2
339	2025-06-18 13:10:00	23	22	1	1	1
340	2025-06-23 11:58:00	21	18	4	3	\N
341	2025-06-23 11:59:00	21	12	0	0	2
342	2025-06-23 12:07:00	18	21	4	3	\N
345	2025-06-23 12:22:00	21	7	2	1	2
346	2025-06-23 12:22:00	21	11	1	0	2
349	2025-06-23 12:29:00	21	22	1	4	\N
350	2025-06-23 12:29:00	22	7	0	0	2
351	2025-06-23 12:33:00	23	22	4	1	\N
355	2025-06-23 12:39:00	23	7	2	4	\N
358	2025-06-23 12:51:00	7	21	4	3	\N
360	2025-06-23 12:55:00	7	22	1	2	1
363	2025-06-23 13:02:00	22	23	3	1	1
364	2025-06-23 13:06:00	21	23	4	0	\N
365	2025-06-23 13:13:00	21	22	2	1	1
366	2025-06-23 13:20:00	23	22	2	3	1
368	2025-06-23 13:25:00	21	22	2	2	2
369	2025-06-23 13:26:00	21	22	0	0	2
370	2025-06-23 13:33:00	22	21	4	2	\N
371	2025-06-23 16:27:00	1	2	2	0	1
374	2025-06-25 12:13:00	14	21	3	4	\N
376	2025-06-25 12:19:00	21	7	3	4	\N
379	2025-06-25 12:23:00	7	22	1	2	1
380	2025-06-25 12:27:00	22	21	4	1	\N
383	2025-06-25 12:32:00	22	7	2	4	\N
386	2025-06-25 12:40:00	7	23	4	2	\N
389	2025-06-25 12:49:00	7	21	3	4	\N
392	2025-06-25 12:57:00	21	22	4	4	2
395	2025-06-25 13:02:00	23	21	1	3	2
396	2025-06-25 13:07:00	23	7	0	2	2
397	2025-06-25 13:11:00	22	23	1	2	2
398	2025-06-25 16:25:00	21	1	0	4	\N
399	2025-06-25 16:31:00	1	21	4	1	\N
412	2025-06-26 12:11:00	1	21	1	2	2
415	2025-06-26 12:18:00	1	7	4	3	\N
416	2025-06-26 12:22:00	1	22	4	2	\N
418	2025-06-26 12:26:00	1	25	1	4	\N
421	2025-06-26 12:31:00	25	23	3	4	\N
424	2025-06-26 12:39:00	23	21	2	4	\N
426	2025-06-26 12:43:00	21	7	4	1	\N
432	2025-06-26 13:01:00	21	22	4	4	2
433	2025-06-26 13:04:00	21	25	1	3	2
434	2025-06-26 13:11:00	23	21	4	3	\N
550	2025-07-02 12:26:00	7	23	4	3	\N
439	2025-06-26 13:18:00	23	22	2	4	\N
440	2025-06-26 13:28:00	22	21	3	2	1
441	2025-06-26 13:28:00	22	21	2	4	\N
442	2025-06-26 16:26:00	1	7	4	2	\N
443	2025-06-26 16:27:00	1	21	0	1	2
444	2025-06-26 16:30:00	1	7	4	2	\N
445	2025-06-26 16:32:00	1	21	2	1	1
446	2025-06-26 16:37:00	7	21	2	4	\N
447	2025-06-26 16:37:00	21	7	2	1	1
448	2025-06-26 16:43:00	21	7	1	2	1
449	2025-06-26 16:49:00	7	21	2	4	\N
451	2025-06-27 07:12:00	1	15	4	2	\N
452	2025-06-27 07:18:00	1	15	3	2	2
453	2025-06-27 07:25:00	1	15	4	2	\N
454	2025-06-27 07:29:00	1	15	4	3	\N
455	2025-06-27 11:55:00	23	21	2	4	\N
456	2025-06-27 12:03:00	21	1	4	3	\N
457	2025-06-27 12:11:00	21	23	4	3	\N
460	2025-06-30 11:59:00	21	14	4	2	\N
461	2025-06-30 12:01:00	21	14	1	0	2
462	2025-06-30 12:07:00	21	14	4	3	\N
464	2025-06-30 12:14:00	21	1	2	4	\N
467	2025-06-30 12:18:00	1	7	2	4	\N
471	2025-06-30 12:22:00	22	7	3	4	\N
473	2025-06-30 12:28:00	7	21	4	2	\N
475	2025-06-30 12:32:00	7	22	4	2	\N
480	2025-06-30 12:40:00	7	23	3	3	2
483	2025-06-30 12:47:00	21	7	4	2	\N
490	2025-06-30 13:08:00	22	3	3	4	\N
491	2025-06-30 16:28:00	7	1	4	2	\N
492	2025-06-30 16:31:00	7	1	0	4	\N
493	2025-07-01 07:43:00	1	3	4	2	\N
498	2025-07-01 08:28:00	1	21	1	4	\N
500	2025-07-01 08:35:00	21	3	4	1	\N
502	2025-07-01 08:45:00	21	1	4	2	\N
503	2025-07-01 08:45:00	21	3	3	4	\N
505	2025-07-01 08:51:00	1	21	4	1	1
506	2025-07-01 08:57:00	7	21	2	4	\N
507	2025-07-01 09:01:00	21	1	4	3	\N
510	2025-07-01 09:06:00	21	7	3	4	\N
516	2025-07-01 12:22:00	21	7	3	4	\N
517	2025-07-01 12:25:00	7	23	0	4	\N
521	2025-07-01 12:39:00	23	22	3	4	\N
525	2025-07-01 12:48:00	22	25	4	3	\N
528	2025-07-01 12:54:00	22	21	4	1	\N
532	2025-07-01 13:01:00	22	7	3	4	\N
533	2025-07-01 13:08:00	7	23	4	2	2
534	2025-07-01 13:15:00	7	25	2	4	\N
535	2025-07-01 16:26:00	21	1	4	0	\N
536	2025-07-01 16:37:00	21	7	1	4	\N
537	2025-07-01 16:37:00	7	23	3	3	1
511	2025-07-01 12:12:00	12	21	1	4	\N
538	2025-07-02 07:24:00	1	15	1	0	2
539	2025-07-02 07:25:00	1	15	0	0	2
540	2025-07-02 07:30:00	15	1	4	2	\N
541	2025-07-02 11:56:00	11	18	4	1	\N
542	2025-07-02 11:57:00	11	18	2	2	1
543	2025-07-02 12:00:00	21	18	4	1	\N
545	2025-07-02 12:17:00	21	1	4	3	\N
546	2025-07-02 12:17:00	21	11	4	1	\N
548	2025-07-02 12:19:00	21	7	0	4	\N
554	2025-07-02 12:30:00	22	7	4	2	\N
556	2025-07-02 12:36:00	22	21	4	1	\N
558	2025-07-02 12:42:00	23	22	3	4	2
559	2025-07-02 12:43:00	7	23	0	0	1
561	2025-07-02 12:50:00	21	23	3	4	\N
562	2025-07-02 12:52:00	23	22	1	1	1
565	2025-07-02 12:59:00	22	7	3	4	\N
567	2025-07-02 13:11:00	7	21	3	4	\N
568	2025-07-02 13:12:00	21	6	2	4	\N
569	2025-07-02 13:20:00	6	23	4	3	2
570	2025-07-02 16:25:00	1	7	4	0	\N
571	2025-07-02 16:26:00	1	11	1	0	1
572	2025-07-02 16:32:00	11	7	4	2	\N
573	2025-07-03 08:11:00	7	1	3	3	1
574	2025-07-03 08:14:00	7	1	3	4	\N
575	2025-07-03 08:18:00	1	7	3	4	\N
576	2025-07-03 08:22:00	7	1	2	3	1
577	2025-07-03 08:26:00	1	7	3	4	\N
578	2025-07-03 08:31:00	7	1	3	4	\N
579	2025-07-03 08:38:00	1	7	3	4	\N
580	2025-07-03 08:45:00	7	21	4	1	\N
581	2025-07-03 08:54:00	7	23	3	4	\N
582	2025-07-03 08:59:00	23	21	3	1	1
583	2025-07-03 09:06:00	23	21	1	3	1
584	2025-07-03 09:11:00	21	23	4	2	\N
585	2025-07-03 09:17:00	21	23	3	4	\N
586	2025-07-03 09:23:00	23	21	4	2	\N
600	2025-07-03 16:29:00	21	7	0	4	\N
601	2025-07-03 16:35:00	7	1	4	2	\N
602	2025-07-03 16:42:00	7	21	4	2	\N
603	2025-07-04 12:00:00	7	1	4	2	\N
604	2025-07-04 12:08:00	7	22	3	4	\N
605	2025-07-04 12:16:00	22	23	2	4	\N
606	2025-07-04 12:19:00	23	7	1	0	1
607	2025-07-04 12:26:00	7	22	3	4	\N
608	2025-07-04 12:29:00	22	18	1	4	\N
609	2025-07-04 12:36:00	18	23	2	4	\N
610	2025-07-04 12:42:00	23	22	4	2	\N
611	2025-07-04 12:49:00	23	25	4	2	\N
612	2025-07-04 12:53:00	23	18	4	0	\N
613	2025-07-04 12:54:00	23	18	4	0	\N
614	2025-07-04 13:00:00	22	23	4	3	\N
615	2025-07-04 13:10:00	22	25	4	3	\N
616	2025-07-04 13:28:00	22	23	4	3	\N
617	2025-07-07 08:42:00	1	13	4	1	\N
618	2025-07-07 08:46:00	1	13	4	0	\N
619	2025-07-07 08:49:00	1	13	4	1	\N
620	2025-07-07 08:53:00	1	13	4	3	\N
621	2025-07-07 12:13:00	11	21	1	0	1
623	2025-07-07 12:17:00	21	28	0	1	2
625	2025-07-07 12:22:00	21	7	4	1	\N
626	2025-07-07 12:26:00	22	21	2	4	\N
629	2025-07-07 12:32:00	21	7	2	4	\N
633	2025-07-07 12:40:00	7	22	4	3	\N
635	2025-07-07 12:45:00	7	23	2	1	1
637	2025-07-07 12:48:00	23	21	1	1	2
639	2025-07-07 12:54:00	22	23	4	3	\N
641	2025-07-07 12:58:00	22	7	4	3	\N
642	2025-07-07 13:03:00	22	21	4	1	\N
644	2025-07-07 13:11:00	22	23	3	4	\N
645	2025-07-07 13:20:00	23	21	4	3	\N
646	2025-07-07 13:27:00	23	22	3	4	\N
647	2025-07-07 16:31:00	1	11	4	3	\N
648	2025-07-07 16:32:00	1	7	2	1	1
649	2025-07-08 12:14:00	14	21	4	2	\N
650	2025-07-08 12:14:00	14	11	0	0	2
651	2025-07-08 12:20:00	1	14	2	4	\N
652	2025-07-08 12:25:00	14	7	4	2	\N
654	2025-07-08 12:31:00	14	22	1	4	\N
656	2025-07-08 12:32:00	22	23	2	0	1
658	2025-07-08 12:39:00	21	23	1	4	\N
660	2025-07-08 12:43:00	23	7	1	0	1
661	2025-07-08 12:46:00	22	7	0	4	\N
663	2025-07-08 12:53:00	21	7	4	3	\N
665	2025-07-08 12:58:00	21	23	3	2	1
667	2025-07-08 13:04:00	22	23	4	2	\N
668	2025-07-08 16:31:00	23	1	4	2	\N
669	2025-07-09 07:18:00	1	21	4	3	\N
670	2025-07-09 07:24:00	1	21	4	3	\N
671	2025-07-09 12:12:00	6	18	4	3	\N
672	2025-07-09 12:14:00	18	21	4	1	\N
674	2025-07-09 12:21:00	22	21	4	2	\N
677	2025-07-09 12:32:00	22	7	4	2	\N
680	2025-07-09 12:34:00	22	23	3	4	\N
682	2025-07-09 12:39:00	23	21	3	1	1
683	2025-07-09 12:42:00	7	21	1	1	1
684	2025-07-09 12:49:00	22	21	4	2	\N
686	2025-07-09 12:53:00	22	23	4	1	\N
687	2025-07-09 12:56:00	22	7	4	1	\N
689	2025-07-09 13:01:00	21	22	4	2	\N
691	2025-07-09 13:11:00	21	23	3	4	\N
692	2025-07-09 13:14:00	23	22	4	0	\N
693	2025-07-09 13:19:00	23	21	4	2	\N
694	2025-07-09 16:33:00	1	7	3	4	\N
695	2025-07-09 16:33:00	7	1	4	1	\N
696	2025-07-09 16:33:00	7	1	4	3	\N
697	2025-07-10 12:13:00	18	6	1	4	\N
698	2025-07-10 12:17:00	6	21	3	4	\N
699	2025-07-10 12:24:00	21	1	3	4	\N
702	2025-07-10 12:29:00	1	22	2	4	\N
703	2025-07-10 12:32:00	23	22	4	0	\N
705	2025-07-10 12:44:00	21	23	4	3	\N
706	2025-07-10 12:49:00	21	22	2	4	\N
708	2025-07-10 12:54:00	22	23	4	2	\N
709	2025-07-10 13:00:00	22	21	4	3	\N
710	2025-07-10 13:04:00	22	23	2	1	2
711	2025-07-10 16:35:00	1	21	4	3	\N
712	2025-07-10 16:44:00	21	23	4	3	\N
713	2025-07-10 16:44:00	21	23	4	1	\N
714	2025-07-10 16:44:00	21	23	4	1	\N
715	2025-07-10 16:44:00	21	23	3	4	\N
716	2025-07-10 16:45:00	21	1	4	3	\N
717	2025-07-10 16:45:00	23	21	4	3	\N
718	2025-07-10 16:49:00	23	21	0	1	2
719	2025-07-10 16:57:00	21	23	4	3	\N
720	2025-07-10 17:02:00	23	21	4	2	\N
721	2025-07-10 17:51:00	23	21	4	1	\N
722	2025-07-10 17:57:00	23	21	2	4	\N
723	2025-07-10 18:01:00	21	23	1	0	1
724	2025-07-10 18:06:00	21	23	4	2	\N
725	2025-07-10 18:12:00	21	23	4	1	\N
726	2025-07-10 18:20:00	21	23	2	4	\N
727	2025-07-10 18:26:00	23	21	1	4	\N
728	2025-07-10 18:34:00	21	23	4	3	\N
729	2025-07-11 07:35:00	21	1	3	4	\N
730	2025-07-11 07:37:00	1	21	3	0	1
731	2025-07-11 07:41:00	1	21	4	2	\N
732	2025-07-11 07:46:00	1	21	3	4	\N
733	2025-07-11 07:53:00	21	23	2	4	\N
734	2025-07-11 07:59:00	23	1	2	4	\N
735	2025-07-11 12:15:00	1	23	4	0	\N
736	2025-07-11 12:17:00	1	25	0	0	1
737	2025-07-11 12:24:00	23	25	4	3	\N
738	2025-07-11 12:28:00	23	1	2	1	2
739	2025-07-11 12:34:00	23	1	4	2	\N
740	2025-07-11 12:40:00	23	1	4	3	\N
741	2025-07-11 12:43:00	23	1	1	4	\N
742	2025-07-11 12:47:00	1	23	4	1	\N
743	2025-07-11 12:54:00	23	1	4	3	\N
744	2025-07-11 13:03:00	23	1	4	3	\N
745	2025-07-14 12:16:00	21	14	2	4	\N
746	2025-07-14 12:18:00	14	1	1	2	1
748	2025-07-14 12:26:00	1	7	3	2	2
750	2025-07-14 12:30:00	1	23	3	4	\N
754	2025-07-14 12:38:00	23	22	3	4	\N
756	2025-07-14 12:44:00	22	25	3	1	1
761	2025-07-14 12:51:00	25	21	4	2	\N
765	2025-07-14 13:01:00	25	23	4	3	\N
767	2025-07-14 13:05:00	25	7	3	4	\N
769	2025-07-14 13:10:00	7	22	2	4	\N
771	2025-07-14 16:30:00	1	7	3	4	\N
772	2025-07-14 16:34:00	7	21	0	1	1
773	2025-07-14 16:37:00	21	7	1	4	\N
781	2025-07-16 12:02:00	7	25	1	1	2
782	2025-07-16 12:02:00	1	7	3	4	\N
784	2025-07-16 12:14:00	22	23	4	3	\N
785	2025-07-16 12:17:00	22	21	4	0	\N
783	2025-07-16 12:12:00	7	22	1	4	\N
790	2025-07-16 12:26:00	22	25	4	2	\N
791	2025-07-16 12:31:00	7	22	1	4	\N
793	2025-07-16 12:44:00	21	23	0	4	\N
795	2025-07-16 12:53:00	23	7	4	1	\N
796	2025-07-16 12:54:00	23	22	4	2	\N
797	2025-07-16 12:58:00	23	24	1	4	\N
798	2025-07-16 13:01:00	24	25	0	1	2
799	2025-07-16 13:05:00	22	24	4	3	\N
800	2025-07-16 13:06:00	23	36	4	3	\N
801	2025-07-16 13:08:00	21	22	1	4	\N
802	2025-07-16 13:28:00	22	23	4	1	\N
803	2025-07-16 13:44:00	22	36	4	1	\N
804	2025-07-18 12:02:00	7	1	4	3	\N
805	2025-07-18 12:04:00	7	1	4	0	\N
806	2025-07-18 12:11:00	7	1	4	3	\N
807	2025-07-18 12:20:00	7	23	4	3	\N
808	2025-07-18 12:22:00	7	1	2	4	\N
809	2025-07-18 12:28:00	1	23	4	3	\N
810	2025-07-18 12:33:00	1	7	2	3	2
811	2025-07-18 12:36:00	23	1	4	1	\N
812	2025-07-21 12:09:00	21	6	3	1	2
813	2025-07-21 12:10:00	21	6	4	3	\N
814	2025-07-21 12:13:00	21	7	0	0	2
816	2025-07-21 12:19:00	7	21	4	3	\N
819	2025-07-21 12:29:00	7	1	3	4	\N
820	2025-07-21 12:30:00	1	22	4	3	\N
821	2025-07-21 12:38:00	7	21	4	3	\N
823	2025-07-21 12:47:00	23	1	3	3	1
826	2025-07-21 12:53:00	1	7	4	2	\N
827	2025-07-21 12:57:00	1	22	3	4	\N
830	2025-07-21 13:02:00	21	22	1	4	\N
831	2025-07-21 13:07:00	22	23	4	1	\N
833	2025-07-21 13:16:00	22	7	4	3	\N
834	2025-07-21 16:30:00	1	7	2	4	\N
835	2025-07-21 16:34:00	7	1	4	0	\N
836	2025-07-21 16:38:00	7	1	1	4	\N
837	2025-07-21 16:42:00	1	7	4	3	\N
838	2025-07-21 16:49:00	1	7	4	3	\N
839	2025-07-21 16:54:00	1	7	3	4	\N
840	2025-07-21 16:59:00	7	1	3	4	\N
841	2025-07-22 12:21:00	21	7	2	4	\N
843	2025-07-22 12:27:00	7	22	4	1	\N
845	2025-07-22 12:36:00	7	23	4	3	\N
849	2025-07-22 12:45:00	7	21	4	2	\N
853	2025-07-22 12:52:00	7	22	3	4	\N
858	2025-07-22 13:04:00	22	23	3	4	\N
859	2025-07-22 13:04:00	23	21	4	2	\N
861	2025-07-22 13:11:00	23	22	4	3	\N
862	2025-07-22 13:16:00	23	1	4	2	\N
863	2025-07-22 13:21:00	23	21	4	2	\N
864	2025-07-22 16:29:00	1	7	3	2	1
865	2025-07-22 16:35:00	1	7	4	2	\N
866	2025-07-22 16:39:00	1	7	4	2	\N
867	2025-07-22 16:41:00	1	7	1	4	\N
869	2025-07-22 16:48:00	7	23	4	2	\N
870	2025-07-22 16:56:00	1	23	4	3	\N
873	2025-07-23 12:20:00	22	11	0	2	2
875	2025-07-23 12:23:00	7	6	0	0	2
876	2025-07-23 12:29:00	7	22	2	4	\N
878	2025-07-23 12:30:00	22	1	0	0	1
879	2025-07-23 12:40:00	23	1	2	4	\N
880	2025-07-23 12:41:00	1	7	3	4	\N
883	2025-07-23 12:47:00	7	22	1	4	\N
885	2025-07-23 12:54:00	22	6	4	3	\N
887	2025-07-23 12:58:00	22	23	4	0	\N
888	2025-07-23 13:02:00	22	7	1	0	2
891	2025-07-23 16:24:00	7	1	4	2	\N
892	2025-07-23 16:29:00	7	1	4	3	\N
893	2025-07-23 16:34:00	7	1	0	4	\N
901	2025-07-24 08:16:00	1	21	3	4	\N
902	2025-07-24 08:17:00	11	1	1	1	1
903	2025-07-24 08:17:00	11	1	4	3	\N
904	2025-07-24 08:18:00	21	22	4	0	\N
905	2025-07-24 08:24:00	21	23	2	4	\N
907	2025-07-24 08:27:00	23	1	4	2	\N
909	2025-07-24 08:35:00	23	7	1	4	\N
911	2025-07-24 08:43:00	7	22	4	3	\N
913	2025-07-24 08:50:00	7	21	1	2	2
915	2025-07-24 08:57:00	23	7	3	4	\N
\.


--
-- Name: jogador_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.jogador_id_seq', 37, true);


--
-- Name: partida_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.partida_id_seq', 919, true);


--
-- Name: jogador jogador_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.jogador
    ADD CONSTRAINT jogador_pkey PRIMARY KEY (id);


--
-- Name: partida partida_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.partida
    ADD CONSTRAINT partida_pkey PRIMARY KEY (id);


--
-- Name: partida_sinuca partida_sinuca_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.partida_sinuca
    ADD CONSTRAINT partida_sinuca_pkey PRIMARY KEY (id);


--
-- Name: partida fk_jogador1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.partida
    ADD CONSTRAINT fk_jogador1 FOREIGN KEY (jogador1_id) REFERENCES public.jogador(id);


--
-- Name: partida fk_jogador2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.partida
    ADD CONSTRAINT fk_jogador2 FOREIGN KEY (jogador2_id) REFERENCES public.jogador(id);


--
-- Name: partida fk_jogador3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.partida
    ADD CONSTRAINT fk_jogador3 FOREIGN KEY (jogador3_id) REFERENCES public.jogador(id);


--
-- Name: partida fk_jogador4; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.partida
    ADD CONSTRAINT fk_jogador4 FOREIGN KEY (jogador4_id) REFERENCES public.jogador(id);


--
-- Name: partida_sinuca fk_partida_sinuca_jogador1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.partida_sinuca
    ADD CONSTRAINT fk_partida_sinuca_jogador1 FOREIGN KEY (jogador1_id) REFERENCES public.jogador(id);


--
-- Name: partida_sinuca fk_partida_sinuca_jogador2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.partida_sinuca
    ADD CONSTRAINT fk_partida_sinuca_jogador2 FOREIGN KEY (jogador2_id) REFERENCES public.jogador(id);


--
-- Name: partida_sinuca partida_jogador1_sinuca_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.partida_sinuca
    ADD CONSTRAINT partida_jogador1_sinuca_id_fkey FOREIGN KEY (jogador1_id) REFERENCES public.jogador(id);


--
-- Name: partida_sinuca partida_jogador2_sinuca_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.partida_sinuca
    ADD CONSTRAINT partida_jogador2_sinuca_id_fkey FOREIGN KEY (jogador2_id) REFERENCES public.jogador(id);


--
-- PostgreSQL database dump complete
--

